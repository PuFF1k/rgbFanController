
FanRGBLEDHUB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e28  08005e28  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08005e28  08005e28  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e28  08005e28  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08005e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000164  08005f94  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009d4  08005f94  000209d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013985  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002dc4  00000000  00000000  00033b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f50  00000000  00000000  000368d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de8  00000000  00000000  00037828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016de6  00000000  00000000  00038610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e18d  00000000  00000000  0004f3f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000747aa  00000000  00000000  0005d583  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1d2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e50  00000000  00000000  000d1da8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08005d8c 	.word	0x08005d8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08005d8c 	.word	0x08005d8c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa60 	bl	8000614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f82a 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8fa 	bl	8000350 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f005 f9d8 	bl	8005510 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000160:	f000 f880 	bl	8000264 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000164:	2100      	movs	r1, #0
 8000166:	480e      	ldr	r0, [pc, #56]	; (80001a0 <main+0x54>)
 8000168:	f002 f91c 	bl	80023a4 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 80);
 800016c:	4b0c      	ldr	r3, [pc, #48]	; (80001a0 <main+0x54>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	2250      	movs	r2, #80	; 0x50
 8000172:	635a      	str	r2, [r3, #52]	; 0x34

	  //memcpy(&valueForPWMFromPC, receivedBufCopy, 4);

	  //memset(receivedBufCopy, 0 ,0x40);

	  if(100 > valueForPWMFromPC && valueForPWMFromPC > 0)
 8000174:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <main+0x58>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b63      	cmp	r3, #99	; 0x63
 800017a:	d8fb      	bhi.n	8000174 <main+0x28>
 800017c:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <main+0x58>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d0f7      	beq.n	8000174 <main+0x28>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, valueForPWMFromPC);
 8000184:	4b06      	ldr	r3, [pc, #24]	; (80001a0 <main+0x54>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <main+0x58>)
 800018a:	6812      	ldr	r2, [r2, #0]
 800018c:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800018e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000192:	4805      	ldr	r0, [pc, #20]	; (80001a8 <main+0x5c>)
 8000194:	f000 fd20 	bl	8000bd8 <HAL_GPIO_TogglePin>

		  valueForPWMFromPC = 0;
 8000198:	4b02      	ldr	r3, [pc, #8]	; (80001a4 <main+0x58>)
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
	  if(100 > valueForPWMFromPC && valueForPWMFromPC > 0)
 800019e:	e7e9      	b.n	8000174 <main+0x28>
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	200001dc 	.word	0x200001dc
 80001a8:	40011000 	.word	0x40011000

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b094      	sub	sp, #80	; 0x50
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f005 fdde 	bl	8005d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	f107 0314 	add.w	r3, r7, #20
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
 80001ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001dc:	2301      	movs	r3, #1
 80001de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ee:	2302      	movs	r3, #2
 80001f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fbce 	bl	80019a4 <HAL_RCC_OscConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800020e:	f000 f8eb 	bl	80003e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000212:	230f      	movs	r3, #15
 8000214:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000222:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000228:	f107 0314 	add.w	r3, r7, #20
 800022c:	2101      	movs	r1, #1
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fe38 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800023a:	f000 f8d5 	bl	80003e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800023e:	2310      	movs	r3, #16
 8000240:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000246:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	4618      	mov	r0, r3
 800024c:	f001 ff94 	bl	8002178 <HAL_RCCEx_PeriphCLKConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000256:	f000 f8c7 	bl	80003e8 <Error_Handler>
  }
}
 800025a:	bf00      	nop
 800025c:	3750      	adds	r7, #80	; 0x50
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08e      	sub	sp, #56	; 0x38
 8000268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800026a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000278:	f107 0320 	add.w	r3, r7, #32
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
 8000290:	615a      	str	r2, [r3, #20]
 8000292:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000294:	4b2c      	ldr	r3, [pc, #176]	; (8000348 <MX_TIM3_Init+0xe4>)
 8000296:	4a2d      	ldr	r2, [pc, #180]	; (800034c <MX_TIM3_Init+0xe8>)
 8000298:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 800029a:	4b2b      	ldr	r3, [pc, #172]	; (8000348 <MX_TIM3_Init+0xe4>)
 800029c:	2230      	movs	r2, #48	; 0x30
 800029e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a0:	4b29      	ldr	r3, [pc, #164]	; (8000348 <MX_TIM3_Init+0xe4>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80002a6:	4b28      	ldr	r3, [pc, #160]	; (8000348 <MX_TIM3_Init+0xe4>)
 80002a8:	2264      	movs	r2, #100	; 0x64
 80002aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ac:	4b26      	ldr	r3, [pc, #152]	; (8000348 <MX_TIM3_Init+0xe4>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002b2:	4b25      	ldr	r3, [pc, #148]	; (8000348 <MX_TIM3_Init+0xe4>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80002b8:	4823      	ldr	r0, [pc, #140]	; (8000348 <MX_TIM3_Init+0xe4>)
 80002ba:	f002 f813 	bl	80022e4 <HAL_TIM_Base_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80002c4:	f000 f890 	bl	80003e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80002ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d2:	4619      	mov	r1, r3
 80002d4:	481c      	ldr	r0, [pc, #112]	; (8000348 <MX_TIM3_Init+0xe4>)
 80002d6:	f002 f95d 	bl	8002594 <HAL_TIM_ConfigClockSource>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80002e0:	f000 f882 	bl	80003e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80002e4:	4818      	ldr	r0, [pc, #96]	; (8000348 <MX_TIM3_Init+0xe4>)
 80002e6:	f002 f828 	bl	800233a <HAL_TIM_PWM_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80002f0:	f000 f87a 	bl	80003e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f4:	2300      	movs	r3, #0
 80002f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80002fc:	f107 0320 	add.w	r3, r7, #32
 8000300:	4619      	mov	r1, r3
 8000302:	4811      	ldr	r0, [pc, #68]	; (8000348 <MX_TIM3_Init+0xe4>)
 8000304:	f002 fca2 	bl	8002c4c <HAL_TIMEx_MasterConfigSynchronization>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800030e:	f000 f86b 	bl	80003e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000312:	2360      	movs	r3, #96	; 0x60
 8000314:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	4619      	mov	r1, r3
 8000328:	4807      	ldr	r0, [pc, #28]	; (8000348 <MX_TIM3_Init+0xe4>)
 800032a:	f002 f86d 	bl	8002408 <HAL_TIM_PWM_ConfigChannel>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000334:	f000 f858 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000338:	4803      	ldr	r0, [pc, #12]	; (8000348 <MX_TIM3_Init+0xe4>)
 800033a:	f000 f8ab 	bl	8000494 <HAL_TIM_MspPostInit>

}
 800033e:	bf00      	nop
 8000340:	3738      	adds	r7, #56	; 0x38
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	200001e0 	.word	0x200001e0
 800034c:	40000400 	.word	0x40000400

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 0310 	add.w	r3, r7, #16
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000364:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <MX_GPIO_Init+0x90>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a1d      	ldr	r2, [pc, #116]	; (80003e0 <MX_GPIO_Init+0x90>)
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <MX_GPIO_Init+0x90>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0310 	and.w	r3, r3, #16
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <MX_GPIO_Init+0x90>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a17      	ldr	r2, [pc, #92]	; (80003e0 <MX_GPIO_Init+0x90>)
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_GPIO_Init+0x90>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0320 	and.w	r3, r3, #32
 8000390:	60bb      	str	r3, [r7, #8]
 8000392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_GPIO_Init+0x90>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a11      	ldr	r2, [pc, #68]	; (80003e0 <MX_GPIO_Init+0x90>)
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_GPIO_Init+0x90>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	480c      	ldr	r0, [pc, #48]	; (80003e4 <MX_GPIO_Init+0x94>)
 80003b4:	f000 fbf8 	bl	8000ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <MX_GPIO_Init+0x94>)
 80003d2:	f000 fa8f 	bl	80008f4 <HAL_GPIO_Init>

}
 80003d6:	bf00      	nop
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40011000 	.word	0x40011000

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a14      	ldr	r2, [pc, #80]	; (8000450 <HAL_MspInit+0x5c>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <HAL_MspInit+0x5c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <HAL_MspInit+0x5c>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <HAL_MspInit+0x60>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_MspInit+0x60>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	40010000 	.word	0x40010000

08000458 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a09      	ldr	r2, [pc, #36]	; (800048c <HAL_TIM_Base_MspInit+0x34>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d10b      	bne.n	8000482 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <HAL_TIM_Base_MspInit+0x38>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a08      	ldr	r2, [pc, #32]	; (8000490 <HAL_TIM_Base_MspInit+0x38>)
 8000470:	f043 0302 	orr.w	r3, r3, #2
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <HAL_TIM_Base_MspInit+0x38>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 0302 	and.w	r3, r3, #2
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000482:	bf00      	nop
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	40000400 	.word	0x40000400
 8000490:	40021000 	.word	0x40021000

08000494 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a0f      	ldr	r2, [pc, #60]	; (80004ec <HAL_TIM_MspPostInit+0x58>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d117      	bne.n	80004e4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <HAL_TIM_MspPostInit+0x5c>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a0d      	ldr	r2, [pc, #52]	; (80004f0 <HAL_TIM_MspPostInit+0x5c>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <HAL_TIM_MspPostInit+0x5c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004cc:	2340      	movs	r3, #64	; 0x40
 80004ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d0:	2302      	movs	r3, #2
 80004d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d4:	2302      	movs	r3, #2
 80004d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <HAL_TIM_MspPostInit+0x60>)
 80004e0:	f000 fa08 	bl	80008f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80004e4:	bf00      	nop
 80004e6:	3720      	adds	r7, #32
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40000400 	.word	0x40000400
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010800 	.word	0x40010800

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <HardFault_Handler+0x4>

0800050a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <MemManage_Handler+0x4>

08000510 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <BusFault_Handler+0x4>

08000516 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <UsageFault_Handler+0x4>

0800051c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000544:	f000 f8ac 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000552:	f000 fc60 	bl	8000e16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000768 	.word	0x20000768

08000560 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <SystemInit+0x5c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a14      	ldr	r2, [pc, #80]	; (80005bc <SystemInit+0x5c>)
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <SystemInit+0x5c>)
 8000572:	685a      	ldr	r2, [r3, #4]
 8000574:	4911      	ldr	r1, [pc, #68]	; (80005bc <SystemInit+0x5c>)
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <SystemInit+0x60>)
 8000578:	4013      	ands	r3, r2
 800057a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <SystemInit+0x5c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <SystemInit+0x5c>)
 8000582:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <SystemInit+0x5c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <SystemInit+0x5c>)
 8000592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000596:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <SystemInit+0x5c>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <SystemInit+0x5c>)
 800059e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <SystemInit+0x5c>)
 80005a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <SystemInit+0x64>)
 80005ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000
 80005c0:	f8ff0000 	.word	0xf8ff0000
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ca:	e003      	b.n	80005d4 <LoopCopyDataInit>

080005cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005d2:	3104      	adds	r1, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005dc:	d3f6      	bcc.n	80005cc <CopyDataInit>
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005e0:	e002      	b.n	80005e8 <LoopFillZerobss>

080005e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005e4:	f842 3b04 	str.w	r3, [r2], #4

080005e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005ec:	d3f9      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ee:	f7ff ffb7 	bl	8000560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005f2:	f005 fb9f 	bl	8005d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f6:	f7ff fda9 	bl	800014c <main>
  bx lr
 80005fa:	4770      	bx	lr
  ldr r3, =_sidata
 80005fc:	08005e30 	.word	0x08005e30
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000604:	20000164 	.word	0x20000164
  ldr r2, =_sbss
 8000608:	20000164 	.word	0x20000164
  ldr r3, = _ebss
 800060c:	200009d4 	.word	0x200009d4

08000610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_2_IRQHandler>
	...

08000614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_Init+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_Init+0x28>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f923 	bl	8000870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f808 	bl	8000640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f7ff fee0 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x54>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_InitTick+0x58>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f93b 	bl	80008da <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80a      	bhi.n	800068a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295
 800067c:	f000 f903 	bl	8000886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4a06      	ldr	r2, [pc, #24]	; (800069c <HAL_InitTick+0x5c>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008
 800069c:	20000004 	.word	0x20000004

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x1c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_IncTick+0x20>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <HAL_IncTick+0x20>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	20000008 	.word	0x20000008
 80006c0:	20000260 	.word	0x20000260

080006c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <HAL_GetTick+0x10>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	20000260 	.word	0x20000260

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	2b00      	cmp	r3, #0
 800074c:	db0b      	blt.n	8000766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 021f 	and.w	r2, r3, #31
 8000754:	4906      	ldr	r1, [pc, #24]	; (8000770 <__NVIC_EnableIRQ+0x34>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	095b      	lsrs	r3, r3, #5
 800075c:	2001      	movs	r0, #1
 800075e:	fa00 f202 	lsl.w	r2, r0, r2
 8000762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	e000e100 	.word	0xe000e100

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f1c3 0307 	rsb	r3, r3, #7
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	bf28      	it	cs
 80007e6:	2304      	movcs	r3, #4
 80007e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3304      	adds	r3, #4
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	d902      	bls.n	80007f8 <NVIC_EncodePriority+0x30>
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3b03      	subs	r3, #3
 80007f6:	e000      	b.n	80007fa <NVIC_EncodePriority+0x32>
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43da      	mvns	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	401a      	ands	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000810:	f04f 31ff 	mov.w	r1, #4294967295
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43d9      	mvns	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	4313      	orrs	r3, r2
         );
}
 8000822:	4618      	mov	r0, r3
 8000824:	3724      	adds	r7, #36	; 0x24
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800083c:	d301      	bcc.n	8000842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083e:	2301      	movs	r3, #1
 8000840:	e00f      	b.n	8000862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <SysTick_Config+0x40>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084a:	210f      	movs	r1, #15
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f7ff ff90 	bl	8000774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <SysTick_Config+0x40>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <SysTick_Config+0x40>)
 800085c:	2207      	movs	r2, #7
 800085e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	e000e010 	.word	0xe000e010

08000870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ff2d 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000898:	f7ff ff42 	bl	8000720 <__NVIC_GetPriorityGrouping>
 800089c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	6978      	ldr	r0, [r7, #20]
 80008a4:	f7ff ff90 	bl	80007c8 <NVIC_EncodePriority>
 80008a8:	4602      	mov	r2, r0
 80008aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff5f 	bl	8000774 <__NVIC_SetPriority>
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff35 	bl	800073c <__NVIC_EnableIRQ>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ffa2 	bl	800082c <SysTick_Config>
 80008e8:	4603      	mov	r3, r0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b08b      	sub	sp, #44	; 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000906:	e127      	b.n	8000b58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000908:	2201      	movs	r2, #1
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	69fa      	ldr	r2, [r7, #28]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	429a      	cmp	r2, r3
 8000922:	f040 8116 	bne.w	8000b52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b12      	cmp	r3, #18
 800092c:	d034      	beq.n	8000998 <HAL_GPIO_Init+0xa4>
 800092e:	2b12      	cmp	r3, #18
 8000930:	d80d      	bhi.n	800094e <HAL_GPIO_Init+0x5a>
 8000932:	2b02      	cmp	r3, #2
 8000934:	d02b      	beq.n	800098e <HAL_GPIO_Init+0x9a>
 8000936:	2b02      	cmp	r3, #2
 8000938:	d804      	bhi.n	8000944 <HAL_GPIO_Init+0x50>
 800093a:	2b00      	cmp	r3, #0
 800093c:	d031      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 800093e:	2b01      	cmp	r3, #1
 8000940:	d01c      	beq.n	800097c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000942:	e048      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000944:	2b03      	cmp	r3, #3
 8000946:	d043      	beq.n	80009d0 <HAL_GPIO_Init+0xdc>
 8000948:	2b11      	cmp	r3, #17
 800094a:	d01b      	beq.n	8000984 <HAL_GPIO_Init+0x90>
          break;
 800094c:	e043      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800094e:	4a89      	ldr	r2, [pc, #548]	; (8000b74 <HAL_GPIO_Init+0x280>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d026      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000954:	4a87      	ldr	r2, [pc, #540]	; (8000b74 <HAL_GPIO_Init+0x280>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d806      	bhi.n	8000968 <HAL_GPIO_Init+0x74>
 800095a:	4a87      	ldr	r2, [pc, #540]	; (8000b78 <HAL_GPIO_Init+0x284>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d020      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000960:	4a86      	ldr	r2, [pc, #536]	; (8000b7c <HAL_GPIO_Init+0x288>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d01d      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
          break;
 8000966:	e036      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000968:	4a85      	ldr	r2, [pc, #532]	; (8000b80 <HAL_GPIO_Init+0x28c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d019      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 800096e:	4a85      	ldr	r2, [pc, #532]	; (8000b84 <HAL_GPIO_Init+0x290>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d016      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000974:	4a84      	ldr	r2, [pc, #528]	; (8000b88 <HAL_GPIO_Init+0x294>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d013      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
          break;
 800097a:	e02c      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e028      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	3304      	adds	r3, #4
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	e023      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	3308      	adds	r3, #8
 8000994:	623b      	str	r3, [r7, #32]
          break;
 8000996:	e01e      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	330c      	adds	r3, #12
 800099e:	623b      	str	r3, [r7, #32]
          break;
 80009a0:	e019      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009aa:	2304      	movs	r3, #4
 80009ac:	623b      	str	r3, [r7, #32]
          break;
 80009ae:	e012      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d105      	bne.n	80009c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b8:	2308      	movs	r3, #8
 80009ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	611a      	str	r2, [r3, #16]
          break;
 80009c2:	e008      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c4:	2308      	movs	r3, #8
 80009c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	69fa      	ldr	r2, [r7, #28]
 80009cc:	615a      	str	r2, [r3, #20]
          break;
 80009ce:	e002      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
          break;
 80009d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	2bff      	cmp	r3, #255	; 0xff
 80009da:	d801      	bhi.n	80009e0 <HAL_GPIO_Init+0xec>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	e001      	b.n	80009e4 <HAL_GPIO_Init+0xf0>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3304      	adds	r3, #4
 80009e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	2bff      	cmp	r3, #255	; 0xff
 80009ea:	d802      	bhi.n	80009f2 <HAL_GPIO_Init+0xfe>
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	e002      	b.n	80009f8 <HAL_GPIO_Init+0x104>
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	3b08      	subs	r3, #8
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	210f      	movs	r1, #15
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	401a      	ands	r2, r3
 8000a0a:	6a39      	ldr	r1, [r7, #32]
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	431a      	orrs	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f000 8096 	beq.w	8000b52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a26:	4b59      	ldr	r3, [pc, #356]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a58      	ldr	r2, [pc, #352]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6193      	str	r3, [r2, #24]
 8000a32:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a3e:	4a54      	ldr	r2, [pc, #336]	; (8000b90 <HAL_GPIO_Init+0x29c>)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	220f      	movs	r2, #15
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4b      	ldr	r2, [pc, #300]	; (8000b94 <HAL_GPIO_Init+0x2a0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d013      	beq.n	8000a92 <HAL_GPIO_Init+0x19e>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4a      	ldr	r2, [pc, #296]	; (8000b98 <HAL_GPIO_Init+0x2a4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d00d      	beq.n	8000a8e <HAL_GPIO_Init+0x19a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <HAL_GPIO_Init+0x2a8>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d007      	beq.n	8000a8a <HAL_GPIO_Init+0x196>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a48      	ldr	r2, [pc, #288]	; (8000ba0 <HAL_GPIO_Init+0x2ac>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_GPIO_Init+0x192>
 8000a82:	2303      	movs	r3, #3
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a86:	2304      	movs	r3, #4
 8000a88:	e004      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	e002      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a92:	2300      	movs	r3, #0
 8000a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a96:	f002 0203 	and.w	r2, r2, #3
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	4093      	lsls	r3, r2
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aa4:	493a      	ldr	r1, [pc, #232]	; (8000b90 <HAL_GPIO_Init+0x29c>)
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	3302      	adds	r3, #2
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4938      	ldr	r1, [pc, #224]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]
 8000aca:	e006      	b.n	8000ada <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000acc:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4933      	ldr	r1, [pc, #204]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d006      	beq.n	8000af4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	492e      	ldr	r1, [pc, #184]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	604b      	str	r3, [r1, #4]
 8000af2:	e006      	b.n	8000b02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	4929      	ldr	r1, [pc, #164]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	4924      	ldr	r1, [pc, #144]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	608b      	str	r3, [r1, #8]
 8000b1a:	e006      	b.n	8000b2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	491f      	ldr	r1, [pc, #124]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	491a      	ldr	r1, [pc, #104]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60cb      	str	r3, [r1, #12]
 8000b42:	e006      	b.n	8000b52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	4915      	ldr	r1, [pc, #84]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	3301      	adds	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f47f aed0 	bne.w	8000908 <HAL_GPIO_Init+0x14>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	372c      	adds	r7, #44	; 0x2c
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	10210000 	.word	0x10210000
 8000b78:	10110000 	.word	0x10110000
 8000b7c:	10120000 	.word	0x10120000
 8000b80:	10310000 	.word	0x10310000
 8000b84:	10320000 	.word	0x10320000
 8000b88:	10220000 	.word	0x10220000
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40011400 	.word	0x40011400
 8000ba4:	40010400 	.word	0x40010400

08000ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bb8:	787b      	ldrb	r3, [r7, #1]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bbe:	887a      	ldrh	r2, [r7, #2]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bc4:	e003      	b.n	8000bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	041a      	lsls	r2, r3, #16
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	611a      	str	r2, [r3, #16]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bf0:	887a      	ldrh	r2, [r7, #2]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000bf6:	e002      	b.n	8000bfe <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bf8:	887a      	ldrh	r2, [r7, #2]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	611a      	str	r2, [r3, #16]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0a:	b08b      	sub	sp, #44	; 0x2c
 8000c0c:	af06      	add	r7, sp, #24
 8000c0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e0d3      	b.n	8000dc2 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d106      	bne.n	8000c34 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f004 fe00 	bl	8005834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2203      	movs	r2, #3
 8000c38:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 f86e 	bl	8002d22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	687e      	ldr	r6, [r7, #4]
 8000c4e:	466d      	mov	r5, sp
 8000c50:	f106 0410 	add.w	r4, r6, #16
 8000c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	602b      	str	r3, [r5, #0]
 8000c5c:	1d33      	adds	r3, r6, #4
 8000c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c60:	6838      	ldr	r0, [r7, #0]
 8000c62:	f002 f837 	bl	8002cd4 <USB_CoreInit>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d005      	beq.n	8000c78 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2202      	movs	r2, #2
 8000c70:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e0a4      	b.n	8000dc2 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 f86b 	bl	8002d5a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e035      	b.n	8000cf6 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	015b      	lsls	r3, r3, #5
 8000c90:	4413      	add	r3, r2
 8000c92:	3329      	adds	r3, #41	; 0x29
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	015b      	lsls	r3, r3, #5
 8000c9e:	4413      	add	r3, r2
 8000ca0:	3328      	adds	r3, #40	; 0x28
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	b291      	uxth	r1, r2
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	015b      	lsls	r3, r3, #5
 8000cb0:	4413      	add	r3, r2
 8000cb2:	3336      	adds	r3, #54	; 0x36
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	015b      	lsls	r3, r3, #5
 8000cbe:	4413      	add	r3, r2
 8000cc0:	332b      	adds	r3, #43	; 0x2b
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	015b      	lsls	r3, r3, #5
 8000ccc:	4413      	add	r3, r2
 8000cce:	3338      	adds	r3, #56	; 0x38
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	015b      	lsls	r3, r3, #5
 8000cda:	4413      	add	r3, r2
 8000cdc:	333c      	adds	r3, #60	; 0x3c
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	015b      	lsls	r3, r3, #5
 8000cea:	4413      	add	r3, r2
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	7bfa      	ldrb	r2, [r7, #15]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d3c4      	bcc.n	8000c8a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	e031      	b.n	8000d6a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	015b      	lsls	r3, r3, #5
 8000d0c:	4413      	add	r3, r2
 8000d0e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	015b      	lsls	r3, r3, #5
 8000d1c:	4413      	add	r3, r2
 8000d1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d22:	7bfa      	ldrb	r2, [r7, #15]
 8000d24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	015b      	lsls	r3, r3, #5
 8000d2c:	4413      	add	r3, r2
 8000d2e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	015b      	lsls	r3, r3, #5
 8000d3c:	4413      	add	r3, r2
 8000d3e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	015b      	lsls	r3, r3, #5
 8000d4c:	4413      	add	r3, r2
 8000d4e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	330a      	adds	r3, #10
 8000d5c:	015b      	lsls	r3, r3, #5
 8000d5e:	4413      	add	r3, r2
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	3301      	adds	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
 8000d6a:	7bfa      	ldrb	r2, [r7, #15]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d3c8      	bcc.n	8000d06 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	687e      	ldr	r6, [r7, #4]
 8000d7c:	466d      	mov	r5, sp
 8000d7e:	f106 0410 	add.w	r4, r6, #16
 8000d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	602b      	str	r3, [r5, #0]
 8000d8a:	1d33      	adds	r3, r6, #4
 8000d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d8e:	6838      	ldr	r0, [r7, #0]
 8000d90:	f001 ffef 	bl	8002d72 <USB_DevInit>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d005      	beq.n	8000da6 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00d      	b.n	8000dc2 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 f82d 	bl	8003e1a <USB_DevDisconnect>

  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d101      	bne.n	8000de0 <HAL_PCD_Start+0x16>
 8000ddc:	2302      	movs	r3, #2
 8000dde:	e016      	b.n	8000e0e <HAL_PCD_Start+0x44>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000de8:	2101      	movs	r1, #1
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f004 ff6b 	bl	8005cc6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 f806 	bl	8003e06 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 ff78 	bl	8002cf4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 f803 	bl	8003e2e <USB_ReadInterrupts>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e32:	d102      	bne.n	8000e3a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 fadf 	bl	80013f8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fff5 	bl	8003e2e <USB_ReadInterrupts>
 8000e44:	4603      	mov	r3, r0
 8000e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e4e:	d112      	bne.n	8000e76 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e62:	b292      	uxth	r2, r2
 8000e64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f004 fd58 	bl	800591e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 f8de 	bl	8001032 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 ffd7 	bl	8003e2e <USB_ReadInterrupts>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e8a:	d10b      	bne.n	8000ea4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f002 ffc0 	bl	8003e2e <USB_ReadInterrupts>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ecc:	b292      	uxth	r2, r2
 8000ece:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 ffa9 	bl	8003e2e <USB_ReadInterrupts>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ee6:	d126      	bne.n	8000f36 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0204 	bic.w	r2, r2, #4
 8000efa:	b292      	uxth	r2, r2
 8000efc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0208 	bic.w	r2, r2, #8
 8000f12:	b292      	uxth	r2, r2
 8000f14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f004 fd39 	bl	8005990 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f30:	b292      	uxth	r2, r2
 8000f32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 ff77 	bl	8003e2e <USB_ReadInterrupts>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f4a:	d13d      	bne.n	8000fc8 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0208 	orr.w	r2, r2, #8
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f76:	b292      	uxth	r2, r2
 8000f78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0204 	orr.w	r2, r2, #4
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 ff48 	bl	8003e2e <USB_ReadInterrupts>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fbc:	b292      	uxth	r2, r2
 8000fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f004 fcca 	bl	800595c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 ff2e 	bl	8003e2e <USB_ReadInterrupts>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fdc:	d10e      	bne.n	8000ffc <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ff0:	b292      	uxth	r2, r2
 8000ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f004 fc83 	bl	8005902 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f002 ff14 	bl	8003e2e <USB_ReadInterrupts>
 8001006:	4603      	mov	r3, r0
 8001008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001010:	d10b      	bne.n	800102a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001024:	b292      	uxth	r2, r2
 8001026:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <HAL_PCD_SetAddress+0x1a>
 8001048:	2302      	movs	r3, #2
 800104a:	e013      	b.n	8001074 <HAL_PCD_SetAddress+0x42>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	78fa      	ldrb	r2, [r7, #3]
 8001058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	78fa      	ldrb	r2, [r7, #3]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f002 febb 	bl	8003de0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4603      	mov	r3, r0
 800108c:	70fb      	strb	r3, [r7, #3]
 800108e:	460b      	mov	r3, r1
 8001090:	803b      	strh	r3, [r7, #0]
 8001092:	4613      	mov	r3, r2
 8001094:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800109a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da0b      	bge.n	80010ba <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	015b      	lsls	r3, r3, #5
 80010aa:	3328      	adds	r3, #40	; 0x28
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2201      	movs	r2, #1
 80010b6:	705a      	strb	r2, [r3, #1]
 80010b8:	e00b      	b.n	80010d2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	015b      	lsls	r3, r3, #5
 80010c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010de:	883a      	ldrh	r2, [r7, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	78ba      	ldrb	r2, [r7, #2]
 80010e8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d004      	beq.n	80010fc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010fc:	78bb      	ldrb	r3, [r7, #2]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d102      	bne.n	8001108 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2200      	movs	r2, #0
 8001106:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800110e:	2b01      	cmp	r3, #1
 8001110:	d101      	bne.n	8001116 <HAL_PCD_EP_Open+0x9a>
 8001112:	2302      	movs	r3, #2
 8001114:	e00e      	b.n	8001134 <HAL_PCD_EP_Open+0xb8>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68f9      	ldr	r1, [r7, #12]
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fe49 	bl	8002dbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001132:	7afb      	ldrb	r3, [r7, #11]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800114c:	2b00      	cmp	r3, #0
 800114e:	da0b      	bge.n	8001168 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	015b      	lsls	r3, r3, #5
 8001158:	3328      	adds	r3, #40	; 0x28
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2201      	movs	r2, #1
 8001164:	705a      	strb	r2, [r3, #1]
 8001166:	e00b      	b.n	8001180 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	015b      	lsls	r3, r3, #5
 8001170:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2200      	movs	r2, #0
 800117e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	b2da      	uxtb	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_PCD_EP_Close+0x5e>
 8001196:	2302      	movs	r3, #2
 8001198:	e00e      	b.n	80011b8 <HAL_PCD_EP_Close+0x7c>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68f9      	ldr	r1, [r7, #12]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 f8f5 	bl	8003398 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	460b      	mov	r3, r1
 80011ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011d0:	7afb      	ldrb	r3, [r7, #11]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	015b      	lsls	r3, r3, #5
 80011d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2200      	movs	r2, #0
 80011f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	b2da      	uxtb	r2, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001206:	7afb      	ldrb	r3, [r7, #11]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	2b00      	cmp	r3, #0
 800120e:	d106      	bne.n	800121e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6979      	ldr	r1, [r7, #20]
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fa54 	bl	80036c4 <USB_EPStartXfer>
 800121c:	e005      	b.n	800122a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6979      	ldr	r1, [r7, #20]
 8001224:	4618      	mov	r0, r3
 8001226:	f002 fa4d 	bl	80036c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	460b      	mov	r3, r1
 8001242:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	015b      	lsls	r3, r3, #5
 800124c:	3328      	adds	r3, #40	; 0x28
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	4413      	add	r3, r2
 8001252:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2201      	movs	r2, #1
 800126a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800126c:	7afb      	ldrb	r3, [r7, #11]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	b2da      	uxtb	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001278:	7afb      	ldrb	r3, [r7, #11]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	2b00      	cmp	r3, #0
 8001280:	d106      	bne.n	8001290 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6979      	ldr	r1, [r7, #20]
 8001288:	4618      	mov	r0, r3
 800128a:	f002 fa1b 	bl	80036c4 <USB_EPStartXfer>
 800128e:	e005      	b.n	800129c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6979      	ldr	r1, [r7, #20]
 8001296:	4618      	mov	r0, r3
 8001298:	f002 fa14 	bl	80036c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	f003 0207 	and.w	r2, r3, #7
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d901      	bls.n	80012c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e046      	b.n	8001352 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da0b      	bge.n	80012e4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	015b      	lsls	r3, r3, #5
 80012d4:	3328      	adds	r3, #40	; 0x28
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2201      	movs	r2, #1
 80012e0:	705a      	strb	r2, [r3, #1]
 80012e2:	e009      	b.n	80012f8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	015b      	lsls	r3, r3, #5
 80012e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2201      	movs	r2, #1
 80012fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	b2da      	uxtb	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_PCD_EP_SetStall+0x72>
 8001314:	2302      	movs	r3, #2
 8001316:	e01c      	b.n	8001352 <HAL_PCD_EP_SetStall+0xac>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68f9      	ldr	r1, [r7, #12]
 8001326:	4618      	mov	r0, r3
 8001328:	f002 fc84 	bl	8003c34 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	2b00      	cmp	r3, #0
 8001334:	d108      	bne.n	8001348 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001340:	4619      	mov	r1, r3
 8001342:	4610      	mov	r0, r2
 8001344:	f002 fd82 	bl	8003e4c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	460b      	mov	r3, r1
 8001364:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	f003 020f 	and.w	r2, r3, #15
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	d901      	bls.n	8001378 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e03a      	b.n	80013ee <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800137c:	2b00      	cmp	r3, #0
 800137e:	da0b      	bge.n	8001398 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	015b      	lsls	r3, r3, #5
 8001388:	3328      	adds	r3, #40	; 0x28
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2201      	movs	r2, #1
 8001394:	705a      	strb	r2, [r3, #1]
 8001396:	e00b      	b.n	80013b0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	015b      	lsls	r3, r3, #5
 80013a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_PCD_EP_ClrStall+0x76>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e00e      	b.n	80013ee <HAL_PCD_EP_ClrStall+0x94>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68f9      	ldr	r1, [r7, #12]
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fc6a 	bl	8003cb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001400:	e282      	b.n	8001908 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800140a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800140c:	8afb      	ldrh	r3, [r7, #22]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001416:	7d7b      	ldrb	r3, [r7, #21]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f040 8142 	bne.w	80016a2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800141e:	8afb      	ldrh	r3, [r7, #22]
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	2b00      	cmp	r3, #0
 8001426:	d151      	bne.n	80014cc <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001438:	b29c      	uxth	r4, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001446:	b29b      	uxth	r3, r3
 8001448:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3328      	adds	r3, #40	; 0x28
 800144e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001458:	b29b      	uxth	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	3302      	adds	r3, #2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	4413      	add	r3, r2
 800146e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	441a      	add	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800148a:	2100      	movs	r1, #0
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f004 fa21 	bl	80058d4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8234 	beq.w	8001908 <PCD_EP_ISR_Handler+0x510>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f040 822f 	bne.w	8001908 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	b292      	uxth	r2, r2
 80014be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80014ca:	e21d      	b.n	8001908 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014d2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80014dc:	8a7b      	ldrh	r3, [r7, #18]
 80014de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d033      	beq.n	800154e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	3306      	adds	r3, #6
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	4413      	add	r3, r2
 8001504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001524:	b29b      	uxth	r3, r3
 8001526:	f002 fce0 	bl	8003eea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	b29a      	uxth	r2, r3
 8001532:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001536:	4013      	ands	r3, r2
 8001538:	b29c      	uxth	r4, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001542:	b292      	uxth	r2, r2
 8001544:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f004 f99a 	bl	8005880 <HAL_PCD_SetupStageCallback>
 800154c:	e1dc      	b.n	8001908 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800154e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f280 81d8 	bge.w	8001908 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	b29a      	uxth	r2, r3
 8001560:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001564:	4013      	ands	r3, r2
 8001566:	b29c      	uxth	r4, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001570:	b292      	uxth	r2, r2
 8001572:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800157c:	b29b      	uxth	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	4413      	add	r3, r2
 8001588:	3306      	adds	r3, #6
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	4413      	add	r3, r2
 8001592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d019      	beq.n	80015dc <PCD_EP_ISR_Handler+0x1e4>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d015      	beq.n	80015dc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6959      	ldr	r1, [r3, #20]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	f002 fc92 	bl	8003eea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	441a      	add	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80015d4:	2100      	movs	r1, #0
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f004 f964 	bl	80058a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	461c      	mov	r4, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	441c      	add	r4, r3
 80015ee:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80015f2:	461c      	mov	r4, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10e      	bne.n	800161a <PCD_EP_ISR_Handler+0x222>
 80015fc:	8823      	ldrh	r3, [r4, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001604:	b29b      	uxth	r3, r3
 8001606:	8023      	strh	r3, [r4, #0]
 8001608:	8823      	ldrh	r3, [r4, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001614:	b29b      	uxth	r3, r3
 8001616:	8023      	strh	r3, [r4, #0]
 8001618:	e02d      	b.n	8001676 <PCD_EP_ISR_Handler+0x27e>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b3e      	cmp	r3, #62	; 0x3e
 8001620:	d812      	bhi.n	8001648 <PCD_EP_ISR_Handler+0x250>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <PCD_EP_ISR_Handler+0x244>
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	3301      	adds	r3, #1
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	b29b      	uxth	r3, r3
 8001640:	029b      	lsls	r3, r3, #10
 8001642:	b29b      	uxth	r3, r3
 8001644:	8023      	strh	r3, [r4, #0]
 8001646:	e016      	b.n	8001676 <PCD_EP_ISR_Handler+0x27e>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	095b      	lsrs	r3, r3, #5
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <PCD_EP_ISR_Handler+0x26a>
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	3b01      	subs	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	b29b      	uxth	r3, r3
 8001666:	029b      	lsls	r3, r3, #10
 8001668:	b29b      	uxth	r3, r3
 800166a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800166e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001672:	b29b      	uxth	r3, r3
 8001674:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001686:	b29c      	uxth	r4, r3
 8001688:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800168c:	b29c      	uxth	r4, r3
 800168e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001692:	b29c      	uxth	r4, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4ba2      	ldr	r3, [pc, #648]	; (8001924 <PCD_EP_ISR_Handler+0x52c>)
 800169a:	4323      	orrs	r3, r4
 800169c:	b29b      	uxth	r3, r3
 800169e:	8013      	strh	r3, [r2, #0]
 80016a0:	e132      	b.n	8001908 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f280 80d1 	bge.w	800185e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	7d7b      	ldrb	r3, [r7, #21]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016d0:	4013      	ands	r3, r2
 80016d2:	b29c      	uxth	r4, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	7d7b      	ldrb	r3, [r7, #21]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80016e4:	b292      	uxth	r2, r2
 80016e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016e8:	7d7b      	ldrb	r3, [r7, #21]
 80016ea:	015b      	lsls	r3, r3, #5
 80016ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	7b1b      	ldrb	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d121      	bne.n	8001742 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001706:	b29b      	uxth	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4413      	add	r3, r2
 8001712:	3306      	adds	r3, #6
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	4413      	add	r3, r2
 800171c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001726:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001728:	8bfb      	ldrh	r3, [r7, #30]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d072      	beq.n	8001814 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6959      	ldr	r1, [r3, #20]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	88da      	ldrh	r2, [r3, #6]
 800173a:	8bfb      	ldrh	r3, [r7, #30]
 800173c:	f002 fbd5 	bl	8003eea <USB_ReadPMA>
 8001740:	e068      	b.n	8001814 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d021      	beq.n	80017a0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001764:	b29b      	uxth	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4413      	add	r3, r2
 8001770:	3302      	adds	r3, #2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	4413      	add	r3, r2
 800177a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001784:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001786:	8bfb      	ldrh	r3, [r7, #30]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02a      	beq.n	80017e2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6959      	ldr	r1, [r3, #20]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	891a      	ldrh	r2, [r3, #8]
 8001798:	8bfb      	ldrh	r3, [r7, #30]
 800179a:	f002 fba6 	bl	8003eea <USB_ReadPMA>
 800179e:	e020      	b.n	80017e2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	3306      	adds	r3, #6
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80017ca:	8bfb      	ldrh	r3, [r7, #30]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6959      	ldr	r1, [r3, #20]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	895a      	ldrh	r2, [r3, #10]
 80017dc:	8bfb      	ldrh	r3, [r7, #30]
 80017de:	f002 fb84 	bl	8003eea <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fc:	b29c      	uxth	r4, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	441a      	add	r2, r3
 800180c:	4b46      	ldr	r3, [pc, #280]	; (8001928 <PCD_EP_ISR_Handler+0x530>)
 800180e:	4323      	orrs	r3, r4
 8001810:	b29b      	uxth	r3, r3
 8001812:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	69da      	ldr	r2, [r3, #28]
 8001818:	8bfb      	ldrh	r3, [r7, #30]
 800181a:	441a      	add	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	8bfb      	ldrh	r3, [r7, #30]
 8001826:	441a      	add	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <PCD_EP_ISR_Handler+0x446>
 8001834:	8bfa      	ldrh	r2, [r7, #30]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	429a      	cmp	r2, r3
 800183c:	d206      	bcs.n	800184c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4619      	mov	r1, r3
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f004 f82d 	bl	80058a4 <HAL_PCD_DataOutStageCallback>
 800184a:	e008      	b.n	800185e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	7819      	ldrb	r1, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fcb1 	bl	80011c0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800185e:	8a7b      	ldrh	r3, [r7, #18]
 8001860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001864:	2b00      	cmp	r3, #0
 8001866:	d04f      	beq.n	8001908 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001868:	7d7b      	ldrb	r3, [r7, #21]
 800186a:	015b      	lsls	r3, r3, #5
 800186c:	3328      	adds	r3, #40	; 0x28
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	7d7b      	ldrb	r3, [r7, #21]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	b29b      	uxth	r3, r3
 8001884:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800188c:	b29c      	uxth	r4, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	7d7b      	ldrb	r3, [r7, #21]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	441a      	add	r2, r3
 800189a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800189e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	3302      	adds	r3, #2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	441a      	add	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d106      	bne.n	80018f6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f003 fff0 	bl	80058d4 <HAL_PCD_DataInStageCallback>
 80018f4:	e008      	b.n	8001908 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	7819      	ldrb	r1, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fc96 	bl	8001234 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001910:	b29b      	uxth	r3, r3
 8001912:	b21b      	sxth	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	f6ff ad74 	blt.w	8001402 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3724      	adds	r7, #36	; 0x24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	ffff8080 	.word	0xffff8080
 8001928:	ffff80c0 	.word	0xffff80c0

0800192c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	817b      	strh	r3, [r7, #10]
 800193a:	4613      	mov	r3, r2
 800193c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001944:	b29b      	uxth	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d008      	beq.n	800195c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800194a:	897b      	ldrh	r3, [r7, #10]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	015b      	lsls	r3, r3, #5
 8001952:	3328      	adds	r3, #40	; 0x28
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e006      	b.n	800196a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800195c:	897b      	ldrh	r3, [r7, #10]
 800195e:	015b      	lsls	r3, r3, #5
 8001960:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800196a:	893b      	ldrh	r3, [r7, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d107      	bne.n	8001980 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2200      	movs	r2, #0
 8001974:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	b29a      	uxth	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	80da      	strh	r2, [r3, #6]
 800197e:	e00b      	b.n	8001998 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2201      	movs	r2, #1
 8001984:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	b29a      	uxth	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	b29a      	uxth	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e26c      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8087 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c4:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d00c      	beq.n	80019ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d0:	4b8f      	ldr	r3, [pc, #572]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d112      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5e>
 80019dc:	4b8c      	ldr	r3, [pc, #560]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d10b      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ea:	4b89      	ldr	r3, [pc, #548]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d06c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x12c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d168      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e246      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x76>
 8001a0c:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a7f      	ldr	r2, [pc, #508]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	e02e      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x98>
 8001a22:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7a      	ldr	r2, [pc, #488]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b78      	ldr	r3, [pc, #480]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a77      	ldr	r2, [pc, #476]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e01d      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0xbc>
 8001a46:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a71      	ldr	r2, [pc, #452]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b6f      	ldr	r3, [pc, #444]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a6e      	ldr	r2, [pc, #440]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a60:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6a      	ldr	r2, [pc, #424]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a67      	ldr	r2, [pc, #412]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7fe fe20 	bl	80006c4 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a88:	f7fe fe1c 	bl	80006c4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1fa      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0xe4>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7fe fe0c 	bl	80006c4 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7fe fe08 	bl	80006c4 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1e6      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x10c>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d063      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ade:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aea:	4b49      	ldr	r3, [pc, #292]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d11c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x18c>
 8001af6:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d116      	bne.n	8001b30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x176>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1ba      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4939      	ldr	r1, [pc, #228]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	e03a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7fe fdc1 	bl	80006c4 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b46:	f7fe fdbd 	bl	80006c4 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e19b      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4927      	ldr	r1, [pc, #156]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e015      	b.n	8001ba6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7fe fda0 	bl	80006c4 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b88:	f7fe fd9c 	bl	80006c4 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e17a      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d03a      	beq.n	8001c28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d019      	beq.n	8001bee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7fe fd80 	bl	80006c4 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7fe fd7c 	bl	80006c4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e15a      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f000 faa8 	bl	800213c <RCC_Delay>
 8001bec:	e01c      	b.n	8001c28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7fe fd66 	bl	80006c4 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfa:	e00f      	b.n	8001c1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7fe fd62 	bl	80006c4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d908      	bls.n	8001c1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e140      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	42420000 	.word	0x42420000
 8001c18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	4b9e      	ldr	r3, [pc, #632]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e9      	bne.n	8001bfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a6 	beq.w	8001d82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3a:	4b97      	ldr	r3, [pc, #604]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10d      	bne.n	8001c62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	4b94      	ldr	r3, [pc, #592]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a93      	ldr	r2, [pc, #588]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	61d3      	str	r3, [r2, #28]
 8001c52:	4b91      	ldr	r3, [pc, #580]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b8e      	ldr	r3, [pc, #568]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d118      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6e:	4b8b      	ldr	r3, [pc, #556]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a8a      	ldr	r2, [pc, #552]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe fd23 	bl	80006c4 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c82:	f7fe fd1f 	bl	80006c4 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b64      	cmp	r3, #100	; 0x64
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0fd      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b81      	ldr	r3, [pc, #516]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x312>
 8001ca8:	4b7b      	ldr	r3, [pc, #492]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a7a      	ldr	r2, [pc, #488]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6213      	str	r3, [r2, #32]
 8001cb4:	e02d      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x334>
 8001cbe:	4b76      	ldr	r3, [pc, #472]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a75      	ldr	r2, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b73      	ldr	r3, [pc, #460]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a72      	ldr	r2, [pc, #456]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	e01c      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d10c      	bne.n	8001cfa <HAL_RCC_OscConfig+0x356>
 8001ce0:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a6c      	ldr	r2, [pc, #432]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6213      	str	r3, [r2, #32]
 8001cec:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a69      	ldr	r2, [pc, #420]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cfa:	4b67      	ldr	r3, [pc, #412]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a66      	ldr	r2, [pc, #408]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	4b64      	ldr	r3, [pc, #400]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a63      	ldr	r2, [pc, #396]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d015      	beq.n	8001d46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe fcd3 	bl	80006c4 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7fe fccf 	bl	80006c4 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0ab      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d38:	4b57      	ldr	r3, [pc, #348]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0ee      	beq.n	8001d22 <HAL_RCC_OscConfig+0x37e>
 8001d44:	e014      	b.n	8001d70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7fe fcbd 	bl	80006c4 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7fe fcb9 	bl	80006c4 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e095      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ee      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d105      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d76:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8081 	beq.w	8001e8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8c:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d061      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d146      	bne.n	8001e2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <HAL_RCC_OscConfig+0x4fc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7fe fc8d 	bl	80006c4 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7fe fc89 	bl	80006c4 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e067      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc0:	4b35      	ldr	r3, [pc, #212]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f0      	bne.n	8001dae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd4:	d108      	bne.n	8001de8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dd6:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	492d      	ldr	r1, [pc, #180]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a19      	ldr	r1, [r3, #32]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	4927      	ldr	r1, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_RCC_OscConfig+0x4fc>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7fe fc5d 	bl	80006c4 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7fe fc59 	bl	80006c4 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e037      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46a>
 8001e2c:	e02f      	b.n	8001e8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <HAL_RCC_OscConfig+0x4fc>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7fe fc46 	bl	80006c4 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7fe fc42 	bl	80006c4 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e020      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x498>
 8001e5a:	e018      	b.n	8001e8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e013      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	42420060 	.word	0x42420060

08001ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0d0      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4965      	ldr	r1, [pc, #404]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b63      	ldr	r3, [pc, #396]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0b8      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f00:	4b59      	ldr	r3, [pc, #356]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a58      	ldr	r2, [pc, #352]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f24:	4b50      	ldr	r3, [pc, #320]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	494d      	ldr	r1, [pc, #308]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d040      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d115      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e07f      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e073      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06b      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 0203 	bic.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4936      	ldr	r1, [pc, #216]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f94:	f7fe fb96 	bl	80006c4 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7fe fb92 	bl	80006c4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e053      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 020c 	and.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1eb      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d210      	bcs.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4922      	ldr	r1, [pc, #136]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e032      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4916      	ldr	r1, [pc, #88]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d009      	beq.n	8002032 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	490e      	ldr	r1, [pc, #56]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002032:	f000 f821 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8002036:	4601      	mov	r1, r0
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	fa21 f303 	lsr.w	r3, r1, r3
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1cc>)
 800204c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1d0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe faf4 	bl	8000640 <HAL_InitTick>

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40022000 	.word	0x40022000
 8002068:	40021000 	.word	0x40021000
 800206c:	08005e18 	.word	0x08005e18
 8002070:	20000000 	.word	0x20000000
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	b490      	push	{r4, r7}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002080:	1d3c      	adds	r4, r7, #4
 8002082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <HAL_RCC_GetSysClockFreq+0xb4>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020a2:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x40>
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x46>
 80020b6:	e02d      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ba:	623b      	str	r3, [r7, #32]
      break;
 80020bc:	e02d      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	0c9b      	lsrs	r3, r3, #18
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ca:	4413      	add	r3, r2
 80020cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d013      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	0c5b      	lsrs	r3, r3, #17
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ea:	4413      	add	r3, r2
 80020ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020f6:	fb02 f203 	mul.w	r2, r2, r3
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	e004      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	623b      	str	r3, [r7, #32]
      break;
 8002112:	e002      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002116:	623b      	str	r3, [r7, #32]
      break;
 8002118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211a:	6a3b      	ldr	r3, [r7, #32]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bc90      	pop	{r4, r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	08005da4 	.word	0x08005da4
 800212c:	08005db4 	.word	0x08005db4
 8002130:	40021000 	.word	0x40021000
 8002134:	007a1200 	.word	0x007a1200
 8002138:	003d0900 	.word	0x003d0900

0800213c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <RCC_Delay+0x34>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <RCC_Delay+0x38>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0a5b      	lsrs	r3, r3, #9
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002158:	bf00      	nop
  }
  while (Delay --);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1e5a      	subs	r2, r3, #1
 800215e:	60fa      	str	r2, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f9      	bne.n	8002158 <RCC_Delay+0x1c>
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000000 	.word	0x20000000
 8002174:	10624dd3 	.word	0x10624dd3

08002178 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d07d      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002194:	2300      	movs	r3, #0
 8002196:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002198:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10d      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	4a4b      	ldr	r2, [pc, #300]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ae:	61d3      	str	r3, [r2, #28]
 80021b0:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021bc:	2301      	movs	r3, #1
 80021be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d118      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021cc:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a42      	ldr	r2, [pc, #264]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d8:	f7fe fa74 	bl	80006c4 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	e008      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e0:	f7fe fa70 	bl	80006c4 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e06d      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f2:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021fe:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002206:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d02e      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d027      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800221c:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002224:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002226:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800222c:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002232:	4a29      	ldr	r2, [pc, #164]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d014      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7fe fa3f 	bl	80006c4 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	e00a      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7fe fa3b 	bl	80006c4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e036      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0ee      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4917      	ldr	r1, [pc, #92]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	4313      	orrs	r3, r2
 800227c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d105      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	490b      	ldr	r1, [pc, #44]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	4904      	ldr	r1, [pc, #16]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
 80022e0:	42420440 	.word	0x42420440

080022e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e01d      	b.n	8002332 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe f8a4 	bl	8000458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3304      	adds	r3, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4610      	mov	r0, r2
 8002324:	f000 f9ee 	bl	8002704 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e01d      	b.n	8002388 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d106      	bne.n	8002366 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f815 	bl	8002390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3304      	adds	r3, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4610      	mov	r0, r2
 800237a:	f000 f9c3 	bl	8002704 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2201      	movs	r2, #1
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fc24 	bl	8002c04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a10      	ldr	r2, [pc, #64]	; (8002404 <HAL_TIM_PWM_Start+0x60>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d107      	bne.n	80023d6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b06      	cmp	r3, #6
 80023e6:	d007      	beq.n	80023f8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40012c00 	.word	0x40012c00

08002408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800241e:	2302      	movs	r3, #2
 8002420:	e0b4      	b.n	800258c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2202      	movs	r2, #2
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0c      	cmp	r3, #12
 8002436:	f200 809f 	bhi.w	8002578 <HAL_TIM_PWM_ConfigChannel+0x170>
 800243a:	a201      	add	r2, pc, #4	; (adr r2, 8002440 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002440:	08002475 	.word	0x08002475
 8002444:	08002579 	.word	0x08002579
 8002448:	08002579 	.word	0x08002579
 800244c:	08002579 	.word	0x08002579
 8002450:	080024b5 	.word	0x080024b5
 8002454:	08002579 	.word	0x08002579
 8002458:	08002579 	.word	0x08002579
 800245c:	08002579 	.word	0x08002579
 8002460:	080024f7 	.word	0x080024f7
 8002464:	08002579 	.word	0x08002579
 8002468:	08002579 	.word	0x08002579
 800246c:	08002579 	.word	0x08002579
 8002470:	08002537 	.word	0x08002537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f9a4 	bl	80027c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0208 	orr.w	r2, r2, #8
 800248e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0204 	bic.w	r2, r2, #4
 800249e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6999      	ldr	r1, [r3, #24]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	619a      	str	r2, [r3, #24]
      break;
 80024b2:	e062      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f9ea 	bl	8002894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6999      	ldr	r1, [r3, #24]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	021a      	lsls	r2, r3, #8
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	619a      	str	r2, [r3, #24]
      break;
 80024f4:	e041      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fa33 	bl	8002968 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0208 	orr.w	r2, r2, #8
 8002510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0204 	bic.w	r2, r2, #4
 8002520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69d9      	ldr	r1, [r3, #28]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	61da      	str	r2, [r3, #28]
      break;
 8002534:	e021      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fa7d 	bl	8002a3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69d9      	ldr	r1, [r3, #28]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	021a      	lsls	r2, r3, #8
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	61da      	str	r2, [r3, #28]
      break;
 8002576:	e000      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002578:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_TIM_ConfigClockSource+0x18>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e0a6      	b.n	80026fa <HAL_TIM_ConfigClockSource+0x166>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d067      	beq.n	80026b4 <HAL_TIM_ConfigClockSource+0x120>
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d80b      	bhi.n	8002600 <HAL_TIM_ConfigClockSource+0x6c>
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	d073      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x140>
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d802      	bhi.n	80025f6 <HAL_TIM_ConfigClockSource+0x62>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d06f      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80025f4:	e078      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d06c      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x140>
 80025fa:	2b30      	cmp	r3, #48	; 0x30
 80025fc:	d06a      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80025fe:	e073      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002600:	2b70      	cmp	r3, #112	; 0x70
 8002602:	d00d      	beq.n	8002620 <HAL_TIM_ConfigClockSource+0x8c>
 8002604:	2b70      	cmp	r3, #112	; 0x70
 8002606:	d804      	bhi.n	8002612 <HAL_TIM_ConfigClockSource+0x7e>
 8002608:	2b50      	cmp	r3, #80	; 0x50
 800260a:	d033      	beq.n	8002674 <HAL_TIM_ConfigClockSource+0xe0>
 800260c:	2b60      	cmp	r3, #96	; 0x60
 800260e:	d041      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002610:	e06a      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002616:	d066      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0x152>
 8002618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261c:	d017      	beq.n	800264e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800261e:	e063      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6899      	ldr	r1, [r3, #8]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f000 fac9 	bl	8002bc6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002642:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	609a      	str	r2, [r3, #8]
      break;
 800264c:	e04c      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f000 fab2 	bl	8002bc6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002670:	609a      	str	r2, [r3, #8]
      break;
 8002672:	e039      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	461a      	mov	r2, r3
 8002682:	f000 fa29 	bl	8002ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2150      	movs	r1, #80	; 0x50
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fa80 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 8002692:	e029      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f000 fa47 	bl	8002b34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2160      	movs	r1, #96	; 0x60
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fa70 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 80026b2:	e019      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	461a      	mov	r2, r3
 80026c2:	f000 fa09 	bl	8002ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2140      	movs	r1, #64	; 0x40
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fa60 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 80026d2:	e009      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	4610      	mov	r0, r2
 80026e0:	f000 fa57 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 80026e4:	e000      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80026e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a29      	ldr	r2, [pc, #164]	; (80027bc <TIM_Base_SetConfig+0xb8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00b      	beq.n	8002734 <TIM_Base_SetConfig+0x30>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002722:	d007      	beq.n	8002734 <TIM_Base_SetConfig+0x30>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <TIM_Base_SetConfig+0xbc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d003      	beq.n	8002734 <TIM_Base_SetConfig+0x30>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a25      	ldr	r2, [pc, #148]	; (80027c4 <TIM_Base_SetConfig+0xc0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d108      	bne.n	8002746 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <TIM_Base_SetConfig+0xb8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00b      	beq.n	8002766 <TIM_Base_SetConfig+0x62>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002754:	d007      	beq.n	8002766 <TIM_Base_SetConfig+0x62>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a19      	ldr	r2, [pc, #100]	; (80027c0 <TIM_Base_SetConfig+0xbc>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d003      	beq.n	8002766 <TIM_Base_SetConfig+0x62>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <TIM_Base_SetConfig+0xc0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d108      	bne.n	8002778 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800276c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a07      	ldr	r2, [pc, #28]	; (80027bc <TIM_Base_SetConfig+0xb8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d103      	bne.n	80027ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	615a      	str	r2, [r3, #20]
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40000800 	.word	0x40000800

080027c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f023 0201 	bic.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0303 	bic.w	r3, r3, #3
 80027fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f023 0302 	bic.w	r3, r3, #2
 8002810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <TIM_OC1_SetConfig+0xc8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10c      	bne.n	800283e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f023 0308 	bic.w	r3, r3, #8
 800282a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f023 0304 	bic.w	r3, r3, #4
 800283c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <TIM_OC1_SetConfig+0xc8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d111      	bne.n	800286a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800284c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	621a      	str	r2, [r3, #32]
}
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40012c00 	.word	0x40012c00

08002894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f023 0210 	bic.w	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f023 0320 	bic.w	r3, r3, #32
 80028de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <TIM_OC2_SetConfig+0xd0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d10d      	bne.n	8002910 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800290e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a14      	ldr	r2, [pc, #80]	; (8002964 <TIM_OC2_SetConfig+0xd0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d113      	bne.n	8002940 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800291e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	621a      	str	r2, [r3, #32]
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	40012c00 	.word	0x40012c00

08002968 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0303 	bic.w	r3, r3, #3
 800299e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <TIM_OC3_SetConfig+0xd0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10d      	bne.n	80029e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <TIM_OC3_SetConfig+0xd0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d113      	bne.n	8002a12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	621a      	str	r2, [r3, #32]
}
 8002a2c:	bf00      	nop
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40012c00 	.word	0x40012c00

08002a3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	031b      	lsls	r3, r3, #12
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0f      	ldr	r2, [pc, #60]	; (8002ad4 <TIM_OC4_SetConfig+0x98>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d109      	bne.n	8002ab0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	019b      	lsls	r3, r3, #6
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	621a      	str	r2, [r3, #32]
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40012c00 	.word	0x40012c00

08002ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	f023 0201 	bic.w	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f023 030a 	bic.w	r3, r3, #10
 8002b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	621a      	str	r2, [r3, #32]
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f023 0210 	bic.w	r2, r3, #16
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	031b      	lsls	r3, r3, #12
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	621a      	str	r2, [r3, #32]
}
 8002b88:	bf00      	nop
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b085      	sub	sp, #20
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f043 0307 	orr.w	r3, r3, #7
 8002bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b087      	sub	sp, #28
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002be0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	021a      	lsls	r2, r3, #8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	609a      	str	r2, [r3, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2201      	movs	r2, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a1a      	ldr	r2, [r3, #32]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	401a      	ands	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a1a      	ldr	r2, [r3, #32]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	621a      	str	r2, [r3, #32]
}
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e032      	b.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c9c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	f107 0014 	add.w	r0, r7, #20
 8002ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	b004      	add	sp, #16
 8002cf2:	4770      	bx	lr

08002cf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cfc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002d00:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	89fb      	ldrh	r3, [r7, #14]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002d2a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002d2e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	b21a      	sxth	r2, r3
 8002d3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	b21b      	sxth	r3, r3
 8002d42:	4013      	ands	r3, r2
 8002d44:	b21b      	sxth	r3, r3
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d72:	b084      	sub	sp, #16
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	f107 0014 	add.w	r0, r7, #20
 8002d80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ffa5 	bl	8002cf4 <USB_EnableGlobalInt>

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002db6:	b004      	add	sp, #16
 8002db8:	4770      	bx	lr
	...

08002dbc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002dbc:	b490      	push	{r4, r7}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de0:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	78db      	ldrb	r3, [r3, #3]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d819      	bhi.n	8002e1e <USB_ActivateEndpoint+0x62>
 8002dea:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <USB_ActivateEndpoint+0x34>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e15 	.word	0x08002e15
 8002df8:	08002e25 	.word	0x08002e25
 8002dfc:	08002e0b 	.word	0x08002e0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002e00:	89bb      	ldrh	r3, [r7, #12]
 8002e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e06:	81bb      	strh	r3, [r7, #12]
      break;
 8002e08:	e00d      	b.n	8002e26 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002e0a:	89bb      	ldrh	r3, [r7, #12]
 8002e0c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002e10:	81bb      	strh	r3, [r7, #12]
      break;
 8002e12:	e008      	b.n	8002e26 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002e14:	89bb      	ldrh	r3, [r7, #12]
 8002e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e1a:	81bb      	strh	r3, [r7, #12]
      break;
 8002e1c:	e003      	b.n	8002e26 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
      break;
 8002e22:	e000      	b.n	8002e26 <USB_ActivateEndpoint+0x6a>
      break;
 8002e24:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	441a      	add	r2, r3
 8002e30:	89bb      	ldrh	r3, [r7, #12]
 8002e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4313      	orrs	r3, r2
 8002e66:	b29c      	uxth	r4, r3
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	441a      	add	r2, r3
 8002e72:	4b8a      	ldr	r3, [pc, #552]	; (800309c <USB_ActivateEndpoint+0x2e0>)
 8002e74:	4323      	orrs	r3, r4
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	7b1b      	ldrb	r3, [r3, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 8112 	bne.w	80030a8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	785b      	ldrb	r3, [r3, #1]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d067      	beq.n	8002f5c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e8c:	687c      	ldr	r4, [r7, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	441c      	add	r4, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	4423      	add	r3, r4
 8002ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ea4:	461c      	mov	r4, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	88db      	ldrh	r3, [r3, #6]
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	b29c      	uxth	r4, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d014      	beq.n	8002ef6 <USB_ActivateEndpoint+0x13a>
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee2:	b29c      	uxth	r4, r3
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	441a      	add	r2, r3
 8002eee:	4b6c      	ldr	r3, [pc, #432]	; (80030a0 <USB_ActivateEndpoint+0x2e4>)
 8002ef0:	4323      	orrs	r3, r4
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	78db      	ldrb	r3, [r3, #3]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d018      	beq.n	8002f30 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f14:	b29c      	uxth	r4, r3
 8002f16:	f084 0320 	eor.w	r3, r4, #32
 8002f1a:	b29c      	uxth	r4, r3
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	4b5d      	ldr	r3, [pc, #372]	; (800309c <USB_ActivateEndpoint+0x2e0>)
 8002f28:	4323      	orrs	r3, r4
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	8013      	strh	r3, [r2, #0]
 8002f2e:	e22b      	b.n	8003388 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f46:	b29c      	uxth	r4, r3
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	441a      	add	r2, r3
 8002f52:	4b52      	ldr	r3, [pc, #328]	; (800309c <USB_ActivateEndpoint+0x2e0>)
 8002f54:	4323      	orrs	r3, r4
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	8013      	strh	r3, [r2, #0]
 8002f5a:	e215      	b.n	8003388 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f5c:	687c      	ldr	r4, [r7, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	441c      	add	r4, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	4423      	add	r3, r4
 8002f70:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f74:	461c      	mov	r4, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	88db      	ldrh	r3, [r3, #6]
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f84:	687c      	ldr	r4, [r7, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	441c      	add	r4, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	4423      	add	r3, r4
 8002f98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f9c:	461c      	mov	r4, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10e      	bne.n	8002fc4 <USB_ActivateEndpoint+0x208>
 8002fa6:	8823      	ldrh	r3, [r4, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	8023      	strh	r3, [r4, #0]
 8002fb2:	8823      	ldrh	r3, [r4, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	8023      	strh	r3, [r4, #0]
 8002fc2:	e02d      	b.n	8003020 <USB_ActivateEndpoint+0x264>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2b3e      	cmp	r3, #62	; 0x3e
 8002fca:	d812      	bhi.n	8002ff2 <USB_ActivateEndpoint+0x236>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	085b      	lsrs	r3, r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <USB_ActivateEndpoint+0x22a>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	029b      	lsls	r3, r3, #10
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	8023      	strh	r3, [r4, #0]
 8002ff0:	e016      	b.n	8003020 <USB_ActivateEndpoint+0x264>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <USB_ActivateEndpoint+0x250>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	3b01      	subs	r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	b29b      	uxth	r3, r3
 8003010:	029b      	lsls	r3, r3, #10
 8003012:	b29b      	uxth	r3, r3
 8003014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301c:	b29b      	uxth	r3, r3
 800301e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	b29c      	uxth	r4, r3
 800302e:	4623      	mov	r3, r4
 8003030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d014      	beq.n	8003062 <USB_ActivateEndpoint+0x2a6>
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	b29b      	uxth	r3, r3
 8003046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304e:	b29c      	uxth	r4, r3
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	441a      	add	r2, r3
 800305a:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <USB_ActivateEndpoint+0x2e8>)
 800305c:	4323      	orrs	r3, r4
 800305e:	b29b      	uxth	r3, r3
 8003060:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003078:	b29c      	uxth	r4, r3
 800307a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800307e:	b29c      	uxth	r4, r3
 8003080:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003084:	b29c      	uxth	r4, r3
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	441a      	add	r2, r3
 8003090:	4b02      	ldr	r3, [pc, #8]	; (800309c <USB_ActivateEndpoint+0x2e0>)
 8003092:	4323      	orrs	r3, r4
 8003094:	b29b      	uxth	r3, r3
 8003096:	8013      	strh	r3, [r2, #0]
 8003098:	e176      	b.n	8003388 <USB_ActivateEndpoint+0x5cc>
 800309a:	bf00      	nop
 800309c:	ffff8080 	.word	0xffff8080
 80030a0:	ffff80c0 	.word	0xffff80c0
 80030a4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	b29c      	uxth	r4, r3
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	4b96      	ldr	r3, [pc, #600]	; (8003324 <USB_ActivateEndpoint+0x568>)
 80030cc:	4323      	orrs	r3, r4
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80030d2:	687c      	ldr	r4, [r7, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030da:	b29b      	uxth	r3, r3
 80030dc:	441c      	add	r4, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	4423      	add	r3, r4
 80030e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ea:	461c      	mov	r4, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	891b      	ldrh	r3, [r3, #8]
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	8023      	strh	r3, [r4, #0]
 80030fa:	687c      	ldr	r4, [r7, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003102:	b29b      	uxth	r3, r3
 8003104:	441c      	add	r4, r3
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	4423      	add	r3, r4
 800310e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003112:	461c      	mov	r4, r3
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	895b      	ldrh	r3, [r3, #10]
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	b29b      	uxth	r3, r3
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	b29b      	uxth	r3, r3
 8003120:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 8088 	bne.w	800323c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	b29c      	uxth	r4, r3
 800313a:	4623      	mov	r3, r4
 800313c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d014      	beq.n	800316e <USB_ActivateEndpoint+0x3b2>
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	b29c      	uxth	r4, r3
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	441a      	add	r2, r3
 8003166:	4b70      	ldr	r3, [pc, #448]	; (8003328 <USB_ActivateEndpoint+0x56c>)
 8003168:	4323      	orrs	r3, r4
 800316a:	b29b      	uxth	r3, r3
 800316c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29c      	uxth	r4, r3
 800317c:	4623      	mov	r3, r4
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d014      	beq.n	80031b0 <USB_ActivateEndpoint+0x3f4>
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b29b      	uxth	r3, r3
 8003194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319c:	b29c      	uxth	r4, r3
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	441a      	add	r2, r3
 80031a8:	4b60      	ldr	r3, [pc, #384]	; (800332c <USB_ActivateEndpoint+0x570>)
 80031aa:	4323      	orrs	r3, r4
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c6:	b29c      	uxth	r4, r3
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	441a      	add	r2, r3
 80031d2:	4b56      	ldr	r3, [pc, #344]	; (800332c <USB_ActivateEndpoint+0x570>)
 80031d4:	4323      	orrs	r3, r4
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f0:	b29c      	uxth	r4, r3
 80031f2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031f6:	b29c      	uxth	r4, r3
 80031f8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80031fc:	b29c      	uxth	r4, r3
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	441a      	add	r2, r3
 8003208:	4b49      	ldr	r3, [pc, #292]	; (8003330 <USB_ActivateEndpoint+0x574>)
 800320a:	4323      	orrs	r3, r4
 800320c:	b29b      	uxth	r3, r3
 800320e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003226:	b29c      	uxth	r4, r3
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	4b3f      	ldr	r3, [pc, #252]	; (8003330 <USB_ActivateEndpoint+0x574>)
 8003234:	4323      	orrs	r3, r4
 8003236:	b29b      	uxth	r3, r3
 8003238:	8013      	strh	r3, [r2, #0]
 800323a:	e0a5      	b.n	8003388 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29c      	uxth	r4, r3
 800324a:	4623      	mov	r3, r4
 800324c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d014      	beq.n	800327e <USB_ActivateEndpoint+0x4c2>
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	b29b      	uxth	r3, r3
 8003262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	b29c      	uxth	r4, r3
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	4b2c      	ldr	r3, [pc, #176]	; (8003328 <USB_ActivateEndpoint+0x56c>)
 8003278:	4323      	orrs	r3, r4
 800327a:	b29b      	uxth	r3, r3
 800327c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29c      	uxth	r4, r3
 800328c:	4623      	mov	r3, r4
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d014      	beq.n	80032c0 <USB_ActivateEndpoint+0x504>
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ac:	b29c      	uxth	r4, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	441a      	add	r2, r3
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <USB_ActivateEndpoint+0x570>)
 80032ba:	4323      	orrs	r3, r4
 80032bc:	b29b      	uxth	r3, r3
 80032be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	b29c      	uxth	r4, r3
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	441a      	add	r2, r3
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <USB_ActivateEndpoint+0x56c>)
 80032e4:	4323      	orrs	r3, r4
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	78db      	ldrb	r3, [r3, #3]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d020      	beq.n	8003334 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003308:	b29c      	uxth	r4, r3
 800330a:	f084 0320 	eor.w	r3, r4, #32
 800330e:	b29c      	uxth	r4, r3
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	441a      	add	r2, r3
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <USB_ActivateEndpoint+0x574>)
 800331c:	4323      	orrs	r3, r4
 800331e:	b29b      	uxth	r3, r3
 8003320:	8013      	strh	r3, [r2, #0]
 8003322:	e01c      	b.n	800335e <USB_ActivateEndpoint+0x5a2>
 8003324:	ffff8180 	.word	0xffff8180
 8003328:	ffffc080 	.word	0xffffc080
 800332c:	ffff80c0 	.word	0xffff80c0
 8003330:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	b29b      	uxth	r3, r3
 8003342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334a:	b29c      	uxth	r4, r3
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	441a      	add	r2, r3
 8003356:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <USB_ActivateEndpoint+0x5d8>)
 8003358:	4323      	orrs	r3, r4
 800335a:	b29b      	uxth	r3, r3
 800335c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003374:	b29c      	uxth	r4, r3
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	441a      	add	r2, r3
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <USB_ActivateEndpoint+0x5d8>)
 8003382:	4323      	orrs	r3, r4
 8003384:	b29b      	uxth	r3, r3
 8003386:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bc90      	pop	{r4, r7}
 8003392:	4770      	bx	lr
 8003394:	ffff8080 	.word	0xffff8080

08003398 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003398:	b490      	push	{r4, r7}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	7b1b      	ldrb	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d171      	bne.n	800348e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	785b      	ldrb	r3, [r3, #1]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d036      	beq.n	8003420 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29c      	uxth	r4, r3
 80033c0:	4623      	mov	r3, r4
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d014      	beq.n	80033f4 <USB_DeactivateEndpoint+0x5c>
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e0:	b29c      	uxth	r4, r3
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	441a      	add	r2, r3
 80033ec:	4b6b      	ldr	r3, [pc, #428]	; (800359c <USB_DeactivateEndpoint+0x204>)
 80033ee:	4323      	orrs	r3, r4
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800340a:	b29c      	uxth	r4, r3
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	441a      	add	r2, r3
 8003416:	4b62      	ldr	r3, [pc, #392]	; (80035a0 <USB_DeactivateEndpoint+0x208>)
 8003418:	4323      	orrs	r3, r4
 800341a:	b29b      	uxth	r3, r3
 800341c:	8013      	strh	r3, [r2, #0]
 800341e:	e144      	b.n	80036aa <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	b29c      	uxth	r4, r3
 800342e:	4623      	mov	r3, r4
 8003430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d014      	beq.n	8003462 <USB_DeactivateEndpoint+0xca>
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344e:	b29c      	uxth	r4, r3
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	441a      	add	r2, r3
 800345a:	4b52      	ldr	r3, [pc, #328]	; (80035a4 <USB_DeactivateEndpoint+0x20c>)
 800345c:	4323      	orrs	r3, r4
 800345e:	b29b      	uxth	r3, r3
 8003460:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003478:	b29c      	uxth	r4, r3
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	441a      	add	r2, r3
 8003484:	4b46      	ldr	r3, [pc, #280]	; (80035a0 <USB_DeactivateEndpoint+0x208>)
 8003486:	4323      	orrs	r3, r4
 8003488:	b29b      	uxth	r3, r3
 800348a:	8013      	strh	r3, [r2, #0]
 800348c:	e10d      	b.n	80036aa <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 8088 	bne.w	80035a8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	b29c      	uxth	r4, r3
 80034a6:	4623      	mov	r3, r4
 80034a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d014      	beq.n	80034da <USB_DeactivateEndpoint+0x142>
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	b29c      	uxth	r4, r3
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	441a      	add	r2, r3
 80034d2:	4b34      	ldr	r3, [pc, #208]	; (80035a4 <USB_DeactivateEndpoint+0x20c>)
 80034d4:	4323      	orrs	r3, r4
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b29c      	uxth	r4, r3
 80034e8:	4623      	mov	r3, r4
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d014      	beq.n	800351c <USB_DeactivateEndpoint+0x184>
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003508:	b29c      	uxth	r4, r3
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	441a      	add	r2, r3
 8003514:	4b21      	ldr	r3, [pc, #132]	; (800359c <USB_DeactivateEndpoint+0x204>)
 8003516:	4323      	orrs	r3, r4
 8003518:	b29b      	uxth	r3, r3
 800351a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	b29c      	uxth	r4, r3
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	4b17      	ldr	r3, [pc, #92]	; (800359c <USB_DeactivateEndpoint+0x204>)
 8003540:	4323      	orrs	r3, r4
 8003542:	b29b      	uxth	r3, r3
 8003544:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355c:	b29c      	uxth	r4, r3
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	441a      	add	r2, r3
 8003568:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <USB_DeactivateEndpoint+0x208>)
 800356a:	4323      	orrs	r3, r4
 800356c:	b29b      	uxth	r3, r3
 800356e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003586:	b29c      	uxth	r4, r3
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	441a      	add	r2, r3
 8003592:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <USB_DeactivateEndpoint+0x208>)
 8003594:	4323      	orrs	r3, r4
 8003596:	b29b      	uxth	r3, r3
 8003598:	8013      	strh	r3, [r2, #0]
 800359a:	e086      	b.n	80036aa <USB_DeactivateEndpoint+0x312>
 800359c:	ffff80c0 	.word	0xffff80c0
 80035a0:	ffff8080 	.word	0xffff8080
 80035a4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29c      	uxth	r4, r3
 80035b6:	4623      	mov	r3, r4
 80035b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d014      	beq.n	80035ea <USB_DeactivateEndpoint+0x252>
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d6:	b29c      	uxth	r4, r3
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	441a      	add	r2, r3
 80035e2:	4b35      	ldr	r3, [pc, #212]	; (80036b8 <USB_DeactivateEndpoint+0x320>)
 80035e4:	4323      	orrs	r3, r4
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29c      	uxth	r4, r3
 80035f8:	4623      	mov	r3, r4
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d014      	beq.n	800362c <USB_DeactivateEndpoint+0x294>
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29b      	uxth	r3, r3
 8003610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003618:	b29c      	uxth	r4, r3
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	441a      	add	r2, r3
 8003624:	4b25      	ldr	r3, [pc, #148]	; (80036bc <USB_DeactivateEndpoint+0x324>)
 8003626:	4323      	orrs	r3, r4
 8003628:	b29b      	uxth	r3, r3
 800362a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	b29c      	uxth	r4, r3
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	441a      	add	r2, r3
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <USB_DeactivateEndpoint+0x320>)
 8003650:	4323      	orrs	r3, r4
 8003652:	b29b      	uxth	r3, r3
 8003654:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366c:	b29c      	uxth	r4, r3
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	441a      	add	r2, r3
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <USB_DeactivateEndpoint+0x328>)
 800367a:	4323      	orrs	r3, r4
 800367c:	b29b      	uxth	r3, r3
 800367e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	b29c      	uxth	r4, r3
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	441a      	add	r2, r3
 80036a2:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <USB_DeactivateEndpoint+0x328>)
 80036a4:	4323      	orrs	r3, r4
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc90      	pop	{r4, r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	ffffc080 	.word	0xffffc080
 80036bc:	ffff80c0 	.word	0xffff80c0
 80036c0:	ffff8080 	.word	0xffff8080

080036c4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b08d      	sub	sp, #52	; 0x34
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	785b      	ldrb	r3, [r3, #1]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	f040 8160 	bne.w	8003998 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d909      	bls.n	80036f8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	1ad2      	subs	r2, r2, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	619a      	str	r2, [r3, #24]
 80036f6:	e005      	b.n	8003704 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2200      	movs	r2, #0
 8003702:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	7b1b      	ldrb	r3, [r3, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d119      	bne.n	8003740 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	6959      	ldr	r1, [r3, #20]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	88da      	ldrh	r2, [r3, #6]
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	b29b      	uxth	r3, r3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fba2 	bl	8003e62 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800371e:	687c      	ldr	r4, [r7, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003726:	b29b      	uxth	r3, r3
 8003728:	441c      	add	r4, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	4423      	add	r3, r4
 8003732:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003736:	461c      	mov	r4, r3
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	b29b      	uxth	r3, r3
 800373c:	8023      	strh	r3, [r4, #0]
 800373e:	e10f      	b.n	8003960 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d065      	beq.n	8003822 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003756:	687c      	ldr	r4, [r7, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d148      	bne.n	80037f2 <USB_EPStartXfer+0x12e>
 8003760:	687c      	ldr	r4, [r7, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003768:	b29b      	uxth	r3, r3
 800376a:	441c      	add	r4, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	4423      	add	r3, r4
 8003774:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003778:	461c      	mov	r4, r3
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10e      	bne.n	800379e <USB_EPStartXfer+0xda>
 8003780:	8823      	ldrh	r3, [r4, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003788:	b29b      	uxth	r3, r3
 800378a:	8023      	strh	r3, [r4, #0]
 800378c:	8823      	ldrh	r3, [r4, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003798:	b29b      	uxth	r3, r3
 800379a:	8023      	strh	r3, [r4, #0]
 800379c:	e03d      	b.n	800381a <USB_EPStartXfer+0x156>
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	2b3e      	cmp	r3, #62	; 0x3e
 80037a2:	d810      	bhi.n	80037c6 <USB_EPStartXfer+0x102>
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <USB_EPStartXfer+0xf6>
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	3301      	adds	r3, #1
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	b29b      	uxth	r3, r3
 80037be:	029b      	lsls	r3, r3, #10
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	8023      	strh	r3, [r4, #0]
 80037c4:	e029      	b.n	800381a <USB_EPStartXfer+0x156>
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <USB_EPStartXfer+0x118>
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	3b01      	subs	r3, #1
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	b29b      	uxth	r3, r3
 80037e0:	029b      	lsls	r3, r3, #10
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	8023      	strh	r3, [r4, #0]
 80037f0:	e013      	b.n	800381a <USB_EPStartXfer+0x156>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d10f      	bne.n	800381a <USB_EPStartXfer+0x156>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003800:	b29b      	uxth	r3, r3
 8003802:	441c      	add	r4, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	4423      	add	r3, r4
 800380c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	895b      	ldrh	r3, [r3, #10]
 800381e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003820:	e063      	b.n	80038ea <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	785b      	ldrb	r3, [r3, #1]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d148      	bne.n	80038bc <USB_EPStartXfer+0x1f8>
 800382a:	687c      	ldr	r4, [r7, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003832:	b29b      	uxth	r3, r3
 8003834:	441c      	add	r4, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	4423      	add	r3, r4
 800383e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003842:	461c      	mov	r4, r3
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10e      	bne.n	8003868 <USB_EPStartXfer+0x1a4>
 800384a:	8823      	ldrh	r3, [r4, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003852:	b29b      	uxth	r3, r3
 8003854:	8023      	strh	r3, [r4, #0]
 8003856:	8823      	ldrh	r3, [r4, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800385e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003862:	b29b      	uxth	r3, r3
 8003864:	8023      	strh	r3, [r4, #0]
 8003866:	e03d      	b.n	80038e4 <USB_EPStartXfer+0x220>
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	2b3e      	cmp	r3, #62	; 0x3e
 800386c:	d810      	bhi.n	8003890 <USB_EPStartXfer+0x1cc>
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	623b      	str	r3, [r7, #32]
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <USB_EPStartXfer+0x1c0>
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	3301      	adds	r3, #1
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	b29b      	uxth	r3, r3
 8003888:	029b      	lsls	r3, r3, #10
 800388a:	b29b      	uxth	r3, r3
 800388c:	8023      	strh	r3, [r4, #0]
 800388e:	e029      	b.n	80038e4 <USB_EPStartXfer+0x220>
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	623b      	str	r3, [r7, #32]
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <USB_EPStartXfer+0x1e2>
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	623b      	str	r3, [r7, #32]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	029b      	lsls	r3, r3, #10
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	8023      	strh	r3, [r4, #0]
 80038ba:	e013      	b.n	80038e4 <USB_EPStartXfer+0x220>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	785b      	ldrb	r3, [r3, #1]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d10f      	bne.n	80038e4 <USB_EPStartXfer+0x220>
 80038c4:	687c      	ldr	r4, [r7, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	441c      	add	r4, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	4423      	add	r3, r4
 80038d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038dc:	461c      	mov	r4, r3
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	891b      	ldrh	r3, [r3, #8]
 80038e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6959      	ldr	r1, [r3, #20]
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fab4 	bl	8003e62 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	785b      	ldrb	r3, [r3, #1]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d115      	bne.n	800392e <USB_EPStartXfer+0x26a>
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003918:	b29c      	uxth	r4, r3
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	441a      	add	r2, r3
 8003924:	4b9a      	ldr	r3, [pc, #616]	; (8003b90 <USB_EPStartXfer+0x4cc>)
 8003926:	4323      	orrs	r3, r4
 8003928:	b29b      	uxth	r3, r3
 800392a:	8013      	strh	r3, [r2, #0]
 800392c:	e018      	b.n	8003960 <USB_EPStartXfer+0x29c>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	785b      	ldrb	r3, [r3, #1]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d114      	bne.n	8003960 <USB_EPStartXfer+0x29c>
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b29b      	uxth	r3, r3
 8003944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394c:	b29c      	uxth	r4, r3
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	441a      	add	r2, r3
 8003958:	4b8e      	ldr	r3, [pc, #568]	; (8003b94 <USB_EPStartXfer+0x4d0>)
 800395a:	4323      	orrs	r3, r4
 800395c:	b29b      	uxth	r3, r3
 800395e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003976:	b29c      	uxth	r4, r3
 8003978:	f084 0310 	eor.w	r3, r4, #16
 800397c:	b29c      	uxth	r4, r3
 800397e:	f084 0320 	eor.w	r3, r4, #32
 8003982:	b29c      	uxth	r4, r3
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	441a      	add	r2, r3
 800398e:	4b82      	ldr	r3, [pc, #520]	; (8003b98 <USB_EPStartXfer+0x4d4>)
 8003990:	4323      	orrs	r3, r4
 8003992:	b29b      	uxth	r3, r3
 8003994:	8013      	strh	r3, [r2, #0]
 8003996:	e146      	b.n	8003c26 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d909      	bls.n	80039b8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	1ad2      	subs	r2, r2, r3
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	619a      	str	r2, [r3, #24]
 80039b6:	e005      	b.n	80039c4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2200      	movs	r2, #0
 80039c2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	7b1b      	ldrb	r3, [r3, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d148      	bne.n	8003a5e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80039cc:	687c      	ldr	r4, [r7, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	441c      	add	r4, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	4423      	add	r3, r4
 80039e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039e4:	461c      	mov	r4, r3
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10e      	bne.n	8003a0a <USB_EPStartXfer+0x346>
 80039ec:	8823      	ldrh	r3, [r4, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	8023      	strh	r3, [r4, #0]
 80039f8:	8823      	ldrh	r3, [r4, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	8023      	strh	r3, [r4, #0]
 8003a08:	e0f2      	b.n	8003bf0 <USB_EPStartXfer+0x52c>
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	2b3e      	cmp	r3, #62	; 0x3e
 8003a0e:	d810      	bhi.n	8003a32 <USB_EPStartXfer+0x36e>
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <USB_EPStartXfer+0x362>
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	3301      	adds	r3, #1
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	029b      	lsls	r3, r3, #10
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	8023      	strh	r3, [r4, #0]
 8003a30:	e0de      	b.n	8003bf0 <USB_EPStartXfer+0x52c>
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d102      	bne.n	8003a48 <USB_EPStartXfer+0x384>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	029b      	lsls	r3, r3, #10
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	8023      	strh	r3, [r4, #0]
 8003a5c:	e0c8      	b.n	8003bf0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	785b      	ldrb	r3, [r3, #1]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d148      	bne.n	8003af8 <USB_EPStartXfer+0x434>
 8003a66:	687c      	ldr	r4, [r7, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	441c      	add	r4, r3
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	4423      	add	r3, r4
 8003a7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a7e:	461c      	mov	r4, r3
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10e      	bne.n	8003aa4 <USB_EPStartXfer+0x3e0>
 8003a86:	8823      	ldrh	r3, [r4, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	8023      	strh	r3, [r4, #0]
 8003a92:	8823      	ldrh	r3, [r4, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	8023      	strh	r3, [r4, #0]
 8003aa2:	e03d      	b.n	8003b20 <USB_EPStartXfer+0x45c>
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8003aa8:	d810      	bhi.n	8003acc <USB_EPStartXfer+0x408>
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <USB_EPStartXfer+0x3fc>
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	029b      	lsls	r3, r3, #10
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	8023      	strh	r3, [r4, #0]
 8003aca:	e029      	b.n	8003b20 <USB_EPStartXfer+0x45c>
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <USB_EPStartXfer+0x41e>
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	029b      	lsls	r3, r3, #10
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	8023      	strh	r3, [r4, #0]
 8003af6:	e013      	b.n	8003b20 <USB_EPStartXfer+0x45c>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	785b      	ldrb	r3, [r3, #1]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10f      	bne.n	8003b20 <USB_EPStartXfer+0x45c>
 8003b00:	687c      	ldr	r4, [r7, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	441c      	add	r4, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	4423      	add	r3, r4
 8003b14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b18:	461c      	mov	r4, r3
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	8023      	strh	r3, [r4, #0]
 8003b20:	687c      	ldr	r4, [r7, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d14e      	bne.n	8003bc8 <USB_EPStartXfer+0x504>
 8003b2a:	687c      	ldr	r4, [r7, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	441c      	add	r4, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	4423      	add	r3, r4
 8003b3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b42:	461c      	mov	r4, r3
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10e      	bne.n	8003b68 <USB_EPStartXfer+0x4a4>
 8003b4a:	8823      	ldrh	r3, [r4, #0]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	8023      	strh	r3, [r4, #0]
 8003b56:	8823      	ldrh	r3, [r4, #0]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	8023      	strh	r3, [r4, #0]
 8003b66:	e043      	b.n	8003bf0 <USB_EPStartXfer+0x52c>
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8003b6c:	d816      	bhi.n	8003b9c <USB_EPStartXfer+0x4d8>
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <USB_EPStartXfer+0x4c0>
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	3301      	adds	r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	029b      	lsls	r3, r3, #10
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	8023      	strh	r3, [r4, #0]
 8003b8e:	e02f      	b.n	8003bf0 <USB_EPStartXfer+0x52c>
 8003b90:	ffff80c0 	.word	0xffff80c0
 8003b94:	ffffc080 	.word	0xffffc080
 8003b98:	ffff8080 	.word	0xffff8080
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d102      	bne.n	8003bb2 <USB_EPStartXfer+0x4ee>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	029b      	lsls	r3, r3, #10
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	8023      	strh	r3, [r4, #0]
 8003bc6:	e013      	b.n	8003bf0 <USB_EPStartXfer+0x52c>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	785b      	ldrb	r3, [r3, #1]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d10f      	bne.n	8003bf0 <USB_EPStartXfer+0x52c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	441c      	add	r4, r3
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	4423      	add	r3, r4
 8003be2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	b29c      	uxth	r4, r3
 8003c08:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c0c:	b29c      	uxth	r4, r3
 8003c0e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c12:	b29c      	uxth	r4, r3
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	441a      	add	r2, r3
 8003c1e:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <USB_EPStartXfer+0x56c>)
 8003c20:	4323      	orrs	r3, r4
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3734      	adds	r7, #52	; 0x34
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd90      	pop	{r4, r7, pc}
 8003c30:	ffff8080 	.word	0xffff8080

08003c34 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c34:	b490      	push	{r4, r7}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d018      	beq.n	8003c78 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5c:	b29c      	uxth	r4, r3
 8003c5e:	f084 0310 	eor.w	r3, r4, #16
 8003c62:	b29c      	uxth	r4, r3
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	441a      	add	r2, r3
 8003c6e:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <USB_EPSetStall+0x80>)
 8003c70:	4323      	orrs	r3, r4
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	8013      	strh	r3, [r2, #0]
 8003c76:	e017      	b.n	8003ca8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	b29c      	uxth	r4, r3
 8003c90:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c94:	b29c      	uxth	r4, r3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	441a      	add	r2, r3
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <USB_EPSetStall+0x80>)
 8003ca2:	4323      	orrs	r3, r4
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc90      	pop	{r4, r7}
 8003cb2:	4770      	bx	lr
 8003cb4:	ffff8080 	.word	0xffff8080

08003cb8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cb8:	b490      	push	{r4, r7}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	7b1b      	ldrb	r3, [r3, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d17d      	bne.n	8003dc6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	785b      	ldrb	r3, [r3, #1]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d03d      	beq.n	8003d4e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b29c      	uxth	r4, r3
 8003ce0:	4623      	mov	r3, r4
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d014      	beq.n	8003d14 <USB_EPClearStall+0x5c>
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d00:	b29c      	uxth	r4, r3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	441a      	add	r2, r3
 8003d0c:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <USB_EPClearStall+0x11c>)
 8003d0e:	4323      	orrs	r3, r4
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	78db      	ldrb	r3, [r3, #3]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d054      	beq.n	8003dc6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d32:	b29c      	uxth	r4, r3
 8003d34:	f084 0320 	eor.w	r3, r4, #32
 8003d38:	b29c      	uxth	r4, r3
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	441a      	add	r2, r3
 8003d44:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <USB_EPClearStall+0x120>)
 8003d46:	4323      	orrs	r3, r4
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	8013      	strh	r3, [r2, #0]
 8003d4c:	e03b      	b.n	8003dc6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29c      	uxth	r4, r3
 8003d5c:	4623      	mov	r3, r4
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d014      	beq.n	8003d90 <USB_EPClearStall+0xd8>
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7c:	b29c      	uxth	r4, r3
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	441a      	add	r2, r3
 8003d88:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <USB_EPClearStall+0x124>)
 8003d8a:	4323      	orrs	r3, r4
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	b29c      	uxth	r4, r3
 8003da8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003dac:	b29c      	uxth	r4, r3
 8003dae:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003db2:	b29c      	uxth	r4, r3
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	441a      	add	r2, r3
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <USB_EPClearStall+0x120>)
 8003dc0:	4323      	orrs	r3, r4
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc90      	pop	{r4, r7}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	ffff80c0 	.word	0xffff80c0
 8003dd8:	ffff8080 	.word	0xffff8080
 8003ddc:	ffffc080 	.word	0xffffc080

08003de0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d103      	bne.n	8003dfa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2280      	movs	r2, #128	; 0x80
 8003df6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003e40:	68fb      	ldr	r3, [r7, #12]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b08d      	sub	sp, #52	; 0x34
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	461a      	mov	r2, r3
 8003e70:	460b      	mov	r3, r1
 8003e72:	80fb      	strh	r3, [r7, #6]
 8003e74:	4613      	mov	r3, r2
 8003e76:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003e78:	88bb      	ldrh	r3, [r7, #4]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	005a      	lsls	r2, r3, #1
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9a:	e01e      	b.n	8003eda <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	3302      	adds	r3, #2
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1dd      	bne.n	8003e9c <USB_WritePMA+0x3a>
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	3734      	adds	r7, #52	; 0x34
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b08b      	sub	sp, #44	; 0x2c
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	460b      	mov	r3, r1
 8003efa:	80fb      	strh	r3, [r7, #6]
 8003efc:	4613      	mov	r3, r2
 8003efe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003f00:	88bb      	ldrh	r3, [r7, #4]
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	005a      	lsls	r2, r3, #1
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f1c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
 8003f22:	e01b      	b.n	8003f5c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	3302      	adds	r3, #2
 8003f30:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	3302      	adds	r3, #2
 8003f54:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e0      	bne.n	8003f24 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003f62:	88bb      	ldrh	r3, [r7, #4]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	701a      	strb	r2, [r3, #0]
  }
}
 8003f7e:	bf00      	nop
 8003f80:	372c      	adds	r7, #44	; 0x2c
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8003f98:	2340      	movs	r3, #64	; 0x40
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	2181      	movs	r1, #129	; 0x81
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f001 fd6f 	bl	8005a82 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8003faa:	2340      	movs	r3, #64	; 0x40
 8003fac:	2203      	movs	r2, #3
 8003fae:	2101      	movs	r1, #1
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f001 fd66 	bl	8005a82 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8003fbe:	2054      	movs	r0, #84	; 0x54
 8003fc0:	f001 fe6c 	bl	8005c9c <USBD_static_malloc>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d102      	bne.n	8003fdc <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	e012      	b.n	8004002 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fe2:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	2340      	movs	r3, #64	; 0x40
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f001 fe2a 	bl	8005c56 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8004002:	7bfb      	ldrb	r3, [r7, #15]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004018:	2181      	movs	r1, #129	; 0x81
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f001 fd57 	bl	8005ace <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004026:	2101      	movs	r1, #1
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f001 fd50 	bl	8005ace <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00e      	beq.n	800405e <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fe2f 	bl	8005cb4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004078:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004092:	2b00      	cmp	r3, #0
 8004094:	d051      	beq.n	800413a <USBD_CUSTOM_HID_Setup+0xd2>
 8004096:	2b20      	cmp	r3, #32
 8004098:	f040 80d8 	bne.w	800424c <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	785b      	ldrb	r3, [r3, #1]
 80040a0:	3b02      	subs	r3, #2
 80040a2:	2b09      	cmp	r3, #9
 80040a4:	d841      	bhi.n	800412a <USBD_CUSTOM_HID_Setup+0xc2>
 80040a6:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <USBD_CUSTOM_HID_Setup+0x44>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	08004105 	.word	0x08004105
 80040b0:	080040e3 	.word	0x080040e3
 80040b4:	0800412b 	.word	0x0800412b
 80040b8:	0800412b 	.word	0x0800412b
 80040bc:	0800412b 	.word	0x0800412b
 80040c0:	0800412b 	.word	0x0800412b
 80040c4:	0800412b 	.word	0x0800412b
 80040c8:	08004115 	.word	0x08004115
 80040cc:	080040f3 	.word	0x080040f3
 80040d0:	080040d5 	.word	0x080040d5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	885b      	ldrh	r3, [r3, #2]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80040e0:	e02a      	b.n	8004138 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	3340      	adds	r3, #64	; 0x40
 80040e6:	2201      	movs	r2, #1
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f001 f98c 	bl	8005408 <USBD_CtlSendData>
          break;
 80040f0:	e022      	b.n	8004138 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	885b      	ldrh	r3, [r3, #2]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8004102:	e019      	b.n	8004138 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	3344      	adds	r3, #68	; 0x44
 8004108:	2201      	movs	r2, #1
 800410a:	4619      	mov	r1, r3
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f001 f97b 	bl	8005408 <USBD_CtlSendData>
          break;
 8004112:	e011      	b.n	8004138 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2201      	movs	r2, #1
 8004118:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800411a:	6939      	ldr	r1, [r7, #16]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	88db      	ldrh	r3, [r3, #6]
 8004120:	461a      	mov	r2, r3
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f001 f99e 	bl	8005464 <USBD_CtlPrepareRx>
          break;
 8004128:	e006      	b.n	8004138 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800412a:	6839      	ldr	r1, [r7, #0]
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f001 f901 	bl	8005334 <USBD_CtlError>
          ret = USBD_FAIL;
 8004132:	2302      	movs	r3, #2
 8004134:	75fb      	strb	r3, [r7, #23]
          break;
 8004136:	bf00      	nop
      }
      break;
 8004138:	e08f      	b.n	800425a <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	2b0b      	cmp	r3, #11
 8004140:	d87c      	bhi.n	800423c <USBD_CUSTOM_HID_Setup+0x1d4>
 8004142:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <USBD_CUSTOM_HID_Setup+0xe0>)
 8004144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004148:	08004179 	.word	0x08004179
 800414c:	0800423d 	.word	0x0800423d
 8004150:	0800423d 	.word	0x0800423d
 8004154:	0800423d 	.word	0x0800423d
 8004158:	0800423d 	.word	0x0800423d
 800415c:	0800423d 	.word	0x0800423d
 8004160:	080041a1 	.word	0x080041a1
 8004164:	0800423d 	.word	0x0800423d
 8004168:	0800423d 	.word	0x0800423d
 800416c:	0800423d 	.word	0x0800423d
 8004170:	080041ef 	.word	0x080041ef
 8004174:	08004217 	.word	0x08004217
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800417e:	2b03      	cmp	r3, #3
 8004180:	d107      	bne.n	8004192 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004182:	f107 030e 	add.w	r3, r7, #14
 8004186:	2202      	movs	r2, #2
 8004188:	4619      	mov	r1, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f001 f93c 	bl	8005408 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004190:	e05b      	b.n	800424a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f001 f8cd 	bl	8005334 <USBD_CtlError>
            ret = USBD_FAIL;
 800419a:	2302      	movs	r3, #2
 800419c:	75fb      	strb	r3, [r7, #23]
          break;
 800419e:	e054      	b.n	800424a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	885b      	ldrh	r3, [r3, #2]
 80041a4:	0a1b      	lsrs	r3, r3, #8
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b22      	cmp	r3, #34	; 0x22
 80041aa:	d10b      	bne.n	80041c4 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	88db      	ldrh	r3, [r3, #6]
 80041b0:	2b21      	cmp	r3, #33	; 0x21
 80041b2:	bf28      	it	cs
 80041b4:	2321      	movcs	r3, #33	; 0x21
 80041b6:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	e00d      	b.n	80041e0 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	885b      	ldrh	r3, [r3, #2]
 80041c8:	0a1b      	lsrs	r3, r3, #8
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b21      	cmp	r3, #33	; 0x21
 80041ce:	d107      	bne.n	80041e0 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80041d0:	4b24      	ldr	r3, [pc, #144]	; (8004264 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80041d2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	88db      	ldrh	r3, [r3, #6]
 80041d8:	2b09      	cmp	r3, #9
 80041da:	bf28      	it	cs
 80041dc:	2309      	movcs	r3, #9
 80041de:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80041e0:	8bfb      	ldrh	r3, [r7, #30]
 80041e2:	461a      	mov	r2, r3
 80041e4:	69b9      	ldr	r1, [r7, #24]
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f001 f90e 	bl	8005408 <USBD_CtlSendData>
          break;
 80041ec:	e02d      	b.n	800424a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d107      	bne.n	8004208 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	3348      	adds	r3, #72	; 0x48
 80041fc:	2201      	movs	r2, #1
 80041fe:	4619      	mov	r1, r3
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f001 f901 	bl	8005408 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004206:	e020      	b.n	800424a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8004208:	6839      	ldr	r1, [r7, #0]
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f001 f892 	bl	8005334 <USBD_CtlError>
            ret = USBD_FAIL;
 8004210:	2302      	movs	r3, #2
 8004212:	75fb      	strb	r3, [r7, #23]
          break;
 8004214:	e019      	b.n	800424a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800421c:	2b03      	cmp	r3, #3
 800421e:	d106      	bne.n	800422e <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	885b      	ldrh	r3, [r3, #2]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800422c:	e00d      	b.n	800424a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800422e:	6839      	ldr	r1, [r7, #0]
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f001 f87f 	bl	8005334 <USBD_CtlError>
            ret = USBD_FAIL;
 8004236:	2302      	movs	r3, #2
 8004238:	75fb      	strb	r3, [r7, #23]
          break;
 800423a:	e006      	b.n	800424a <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f001 f878 	bl	8005334 <USBD_CtlError>
          ret = USBD_FAIL;
 8004244:	2302      	movs	r3, #2
 8004246:	75fb      	strb	r3, [r7, #23]
          break;
 8004248:	bf00      	nop
      }
      break;
 800424a:	e006      	b.n	800425a <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f001 f870 	bl	8005334 <USBD_CtlError>
      ret = USBD_FAIL;
 8004254:	2302      	movs	r3, #2
 8004256:	75fb      	strb	r3, [r7, #23]
      break;
 8004258:	bf00      	nop
  }
  return ret;
 800425a:	7dfb      	ldrb	r3, [r7, #23]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3720      	adds	r7, #32
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	200000c8 	.word	0x200000c8

08004268 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	4613      	mov	r3, r2
 8004274:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800427c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004284:	2b03      	cmp	r3, #3
 8004286:	d111      	bne.n	80042ac <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	2181      	movs	r1, #129	; 0x81
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f001 fcb5 	bl	8005c10 <USBD_LL_Transmit>
 80042a6:	e001      	b.n	80042ac <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2229      	movs	r2, #41	; 0x29
 80042c4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80042c6:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000044 	.word	0x20000044

080042d8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2229      	movs	r2, #41	; 0x29
 80042e4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80042e6:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000070 	.word	0x20000070

080042f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2229      	movs	r2, #41	; 0x29
 8004304:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8004306:	4b03      	ldr	r3, [pc, #12]	; (8004314 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	2000009c 	.word	0x2000009c

08004318 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800434e:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4610      	mov	r0, r2
 800435c:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	2340      	movs	r3, #64	; 0x40
 8004362:	2101      	movs	r1, #1
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f001 fc76 	bl	8005c56 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004382:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d109      	bne.n	80043a0 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4610      	mov	r0, r2
 8004398:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	220a      	movs	r2, #10
 80043b8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80043ba:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	200000d4 	.word	0x200000d4

080043cc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80043d6:	2302      	movs	r3, #2
 80043d8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr

080043f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800440c:	2302      	movs	r3, #2
 800440e:	e01a      	b.n	8004446 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	79fa      	ldrb	r2, [r7, #7]
 800443c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f001 fab4 	bl	80059ac <USBD_LL_Init>

  return USBD_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d006      	beq.n	8004470 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	73fb      	strb	r3, [r7, #15]
 800446e:	e001      	b.n	8004474 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004470:	2302      	movs	r3, #2
 8004472:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004474:	7bfb      	ldrb	r3, [r7, #15]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f001 fadf 	bl	8005a4c <USBD_LL_Start>

  return USBD_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80044b8:	2302      	movs	r3, #2
 80044ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00c      	beq.n	80044e0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	4611      	mov	r1, r2
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	4798      	blx	r3
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	4611      	mov	r1, r2
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	4798      	blx	r3

  return USBD_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 feca 	bl	80052bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2b01      	cmp	r3, #1
 800454a:	d00c      	beq.n	8004566 <USBD_LL_SetupStage+0x56>
 800454c:	2b01      	cmp	r3, #1
 800454e:	d302      	bcc.n	8004556 <USBD_LL_SetupStage+0x46>
 8004550:	2b02      	cmp	r3, #2
 8004552:	d010      	beq.n	8004576 <USBD_LL_SetupStage+0x66>
 8004554:	e017      	b.n	8004586 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800455c:	4619      	mov	r1, r3
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f9ca 	bl	80048f8 <USBD_StdDevReq>
      break;
 8004564:	e01a      	b.n	800459c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa2c 	bl	80049cc <USBD_StdItfReq>
      break;
 8004574:	e012      	b.n	800459c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800457c:	4619      	mov	r1, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa6a 	bl	8004a58 <USBD_StdEPReq>
      break;
 8004584:	e00a      	b.n	800459c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800458c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004590:	b2db      	uxtb	r3, r3
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f001 fab9 	bl	8005b0c <USBD_LL_StallEP>
      break;
 800459a:	bf00      	nop
  }

  return USBD_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	460b      	mov	r3, r1
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80045b4:	7afb      	ldrb	r3, [r7, #11]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d14b      	bne.n	8004652 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80045c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d134      	bne.n	8004636 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d919      	bls.n	800460c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	1ad2      	subs	r2, r2, r3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d203      	bcs.n	80045fa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	e002      	b.n	8004600 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80045fe:	b29b      	uxth	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 ff4b 	bl	80054a0 <USBD_CtlContinueRx>
 800460a:	e038      	b.n	800467e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800461e:	2b03      	cmp	r3, #3
 8004620:	d105      	bne.n	800462e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 ff48 	bl	80054c4 <USBD_CtlSendStatus>
 8004634:	e023      	b.n	800467e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800463c:	2b05      	cmp	r3, #5
 800463e:	d11e      	bne.n	800467e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004648:	2100      	movs	r1, #0
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f001 fa5e 	bl	8005b0c <USBD_LL_StallEP>
 8004650:	e015      	b.n	800467e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00d      	beq.n	800467a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004664:	2b03      	cmp	r3, #3
 8004666:	d108      	bne.n	800467a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	7afa      	ldrb	r2, [r7, #11]
 8004672:	4611      	mov	r1, r2
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	4798      	blx	r3
 8004678:	e001      	b.n	800467e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800467a:	2302      	movs	r3, #2
 800467c:	e000      	b.n	8004680 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	460b      	mov	r3, r1
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004696:	7afb      	ldrb	r3, [r7, #11]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d17f      	bne.n	800479c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3314      	adds	r3, #20
 80046a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d15c      	bne.n	8004766 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d915      	bls.n	80046e4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	1ad2      	subs	r2, r2, r3
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 feb5 	bl	8005440 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80046d6:	2300      	movs	r3, #0
 80046d8:	2200      	movs	r2, #0
 80046da:	2100      	movs	r1, #0
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f001 faba 	bl	8005c56 <USBD_LL_PrepareReceive>
 80046e2:	e04e      	b.n	8004782 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	6912      	ldr	r2, [r2, #16]
 80046ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80046f0:	fb02 f201 	mul.w	r2, r2, r1
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d11c      	bne.n	8004734 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004702:	429a      	cmp	r2, r3
 8004704:	d316      	bcc.n	8004734 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004710:	429a      	cmp	r2, r3
 8004712:	d20f      	bcs.n	8004734 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004714:	2200      	movs	r2, #0
 8004716:	2100      	movs	r1, #0
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fe91 	bl	8005440 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004726:	2300      	movs	r3, #0
 8004728:	2200      	movs	r2, #0
 800472a:	2100      	movs	r1, #0
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f001 fa92 	bl	8005c56 <USBD_LL_PrepareReceive>
 8004732:	e026      	b.n	8004782 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004746:	2b03      	cmp	r3, #3
 8004748:	d105      	bne.n	8004756 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004756:	2180      	movs	r1, #128	; 0x80
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f001 f9d7 	bl	8005b0c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fec3 	bl	80054ea <USBD_CtlReceiveStatus>
 8004764:	e00d      	b.n	8004782 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800476c:	2b04      	cmp	r3, #4
 800476e:	d004      	beq.n	800477a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800477a:	2180      	movs	r1, #128	; 0x80
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f001 f9c5 	bl	8005b0c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004788:	2b01      	cmp	r3, #1
 800478a:	d11d      	bne.n	80047c8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff fe83 	bl	8004498 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800479a:	e015      	b.n	80047c8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d108      	bne.n	80047c4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	7afa      	ldrb	r2, [r7, #11]
 80047bc:	4611      	mov	r1, r2
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	4798      	blx	r3
 80047c2:	e001      	b.n	80047c8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80047c4:	2302      	movs	r3, #2
 80047c6:	e000      	b.n	80047ca <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047da:	2340      	movs	r3, #64	; 0x40
 80047dc:	2200      	movs	r2, #0
 80047de:	2100      	movs	r1, #0
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f001 f94e 	bl	8005a82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2240      	movs	r2, #64	; 0x40
 80047f2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047f6:	2340      	movs	r3, #64	; 0x40
 80047f8:	2200      	movs	r2, #0
 80047fa:	2180      	movs	r1, #128	; 0x80
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f001 f940 	bl	8005a82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2240      	movs	r2, #64	; 0x40
 800480c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6852      	ldr	r2, [r2, #4]
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	4611      	mov	r1, r2
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	4798      	blx	r3
  }

  return USBD_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	78fa      	ldrb	r2, [r7, #3]
 8004864:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr

08004872 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2204      	movs	r2, #4
 800488a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr

0800489a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d105      	bne.n	80048b8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr

080048c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d10b      	bne.n	80048ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800490e:	2b20      	cmp	r3, #32
 8004910:	d004      	beq.n	800491c <USBD_StdDevReq+0x24>
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d002      	beq.n	800491c <USBD_StdDevReq+0x24>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <USBD_StdDevReq+0x34>
 800491a:	e04c      	b.n	80049b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	6839      	ldr	r1, [r7, #0]
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	4798      	blx	r3
      break;
 800492a:	e049      	b.n	80049c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	2b09      	cmp	r3, #9
 8004932:	d83a      	bhi.n	80049aa <USBD_StdDevReq+0xb2>
 8004934:	a201      	add	r2, pc, #4	; (adr r2, 800493c <USBD_StdDevReq+0x44>)
 8004936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493a:	bf00      	nop
 800493c:	0800498d 	.word	0x0800498d
 8004940:	080049a1 	.word	0x080049a1
 8004944:	080049ab 	.word	0x080049ab
 8004948:	08004997 	.word	0x08004997
 800494c:	080049ab 	.word	0x080049ab
 8004950:	0800496f 	.word	0x0800496f
 8004954:	08004965 	.word	0x08004965
 8004958:	080049ab 	.word	0x080049ab
 800495c:	08004983 	.word	0x08004983
 8004960:	08004979 	.word	0x08004979
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f9d4 	bl	8004d14 <USBD_GetDescriptor>
          break;
 800496c:	e022      	b.n	80049b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800496e:	6839      	ldr	r1, [r7, #0]
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fb37 	bl	8004fe4 <USBD_SetAddress>
          break;
 8004976:	e01d      	b.n	80049b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004978:	6839      	ldr	r1, [r7, #0]
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fb74 	bl	8005068 <USBD_SetConfig>
          break;
 8004980:	e018      	b.n	80049b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004982:	6839      	ldr	r1, [r7, #0]
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fbfd 	bl	8005184 <USBD_GetConfig>
          break;
 800498a:	e013      	b.n	80049b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800498c:	6839      	ldr	r1, [r7, #0]
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fc2c 	bl	80051ec <USBD_GetStatus>
          break;
 8004994:	e00e      	b.n	80049b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004996:	6839      	ldr	r1, [r7, #0]
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fc5a 	bl	8005252 <USBD_SetFeature>
          break;
 800499e:	e009      	b.n	80049b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80049a0:	6839      	ldr	r1, [r7, #0]
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fc69 	bl	800527a <USBD_ClrFeature>
          break;
 80049a8:	e004      	b.n	80049b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80049aa:	6839      	ldr	r1, [r7, #0]
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fcc1 	bl	8005334 <USBD_CtlError>
          break;
 80049b2:	bf00      	nop
      }
      break;
 80049b4:	e004      	b.n	80049c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fcbb 	bl	8005334 <USBD_CtlError>
      break;
 80049be:	bf00      	nop
  }

  return ret;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop

080049cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d003      	beq.n	80049ee <USBD_StdItfReq+0x22>
 80049e6:	2b40      	cmp	r3, #64	; 0x40
 80049e8:	d001      	beq.n	80049ee <USBD_StdItfReq+0x22>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d12a      	bne.n	8004a44 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049f4:	3b01      	subs	r3, #1
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d81d      	bhi.n	8004a36 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	889b      	ldrh	r3, [r3, #4]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d813      	bhi.n	8004a2c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	6839      	ldr	r1, [r7, #0]
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	4798      	blx	r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	88db      	ldrh	r3, [r3, #6]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d110      	bne.n	8004a40 <USBD_StdItfReq+0x74>
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10d      	bne.n	8004a40 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fd4d 	bl	80054c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004a2a:	e009      	b.n	8004a40 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fc80 	bl	8005334 <USBD_CtlError>
          break;
 8004a34:	e004      	b.n	8004a40 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004a36:	6839      	ldr	r1, [r7, #0]
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fc7b 	bl	8005334 <USBD_CtlError>
          break;
 8004a3e:	e000      	b.n	8004a42 <USBD_StdItfReq+0x76>
          break;
 8004a40:	bf00      	nop
      }
      break;
 8004a42:	e004      	b.n	8004a4e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004a44:	6839      	ldr	r1, [r7, #0]
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fc74 	bl	8005334 <USBD_CtlError>
      break;
 8004a4c:	bf00      	nop
  }

  return USBD_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	889b      	ldrh	r3, [r3, #4]
 8004a6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d004      	beq.n	8004a82 <USBD_StdEPReq+0x2a>
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d002      	beq.n	8004a82 <USBD_StdEPReq+0x2a>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <USBD_StdEPReq+0x3a>
 8004a80:	e13d      	b.n	8004cfe <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	6839      	ldr	r1, [r7, #0]
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
      break;
 8004a90:	e13a      	b.n	8004d08 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d10a      	bne.n	8004ab4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	6839      	ldr	r1, [r7, #0]
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	4798      	blx	r3
 8004aac:	4603      	mov	r3, r0
 8004aae:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	e12a      	b.n	8004d0a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	785b      	ldrb	r3, [r3, #1]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d03e      	beq.n	8004b3a <USBD_StdEPReq+0xe2>
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d002      	beq.n	8004ac6 <USBD_StdEPReq+0x6e>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d070      	beq.n	8004ba6 <USBD_StdEPReq+0x14e>
 8004ac4:	e115      	b.n	8004cf2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d002      	beq.n	8004ad6 <USBD_StdEPReq+0x7e>
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d015      	beq.n	8004b00 <USBD_StdEPReq+0xa8>
 8004ad4:	e02b      	b.n	8004b2e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ad6:	7bbb      	ldrb	r3, [r7, #14]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00c      	beq.n	8004af6 <USBD_StdEPReq+0x9e>
 8004adc:	7bbb      	ldrb	r3, [r7, #14]
 8004ade:	2b80      	cmp	r3, #128	; 0x80
 8004ae0:	d009      	beq.n	8004af6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004ae2:	7bbb      	ldrb	r3, [r7, #14]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f001 f810 	bl	8005b0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004aec:	2180      	movs	r1, #128	; 0x80
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f001 f80c 	bl	8005b0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004af4:	e020      	b.n	8004b38 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004af6:	6839      	ldr	r1, [r7, #0]
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fc1b 	bl	8005334 <USBD_CtlError>
              break;
 8004afe:	e01b      	b.n	8004b38 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	885b      	ldrh	r3, [r3, #2]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10e      	bne.n	8004b26 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004b08:	7bbb      	ldrb	r3, [r7, #14]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <USBD_StdEPReq+0xce>
 8004b0e:	7bbb      	ldrb	r3, [r7, #14]
 8004b10:	2b80      	cmp	r3, #128	; 0x80
 8004b12:	d008      	beq.n	8004b26 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	88db      	ldrh	r3, [r3, #6]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d104      	bne.n	8004b26 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004b1c:	7bbb      	ldrb	r3, [r7, #14]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fff3 	bl	8005b0c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fccc 	bl	80054c4 <USBD_CtlSendStatus>

              break;
 8004b2c:	e004      	b.n	8004b38 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004b2e:	6839      	ldr	r1, [r7, #0]
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fbff 	bl	8005334 <USBD_CtlError>
              break;
 8004b36:	bf00      	nop
          }
          break;
 8004b38:	e0e0      	b.n	8004cfc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d002      	beq.n	8004b4a <USBD_StdEPReq+0xf2>
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d015      	beq.n	8004b74 <USBD_StdEPReq+0x11c>
 8004b48:	e026      	b.n	8004b98 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004b4a:	7bbb      	ldrb	r3, [r7, #14]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00c      	beq.n	8004b6a <USBD_StdEPReq+0x112>
 8004b50:	7bbb      	ldrb	r3, [r7, #14]
 8004b52:	2b80      	cmp	r3, #128	; 0x80
 8004b54:	d009      	beq.n	8004b6a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004b56:	7bbb      	ldrb	r3, [r7, #14]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 ffd6 	bl	8005b0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004b60:	2180      	movs	r1, #128	; 0x80
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 ffd2 	bl	8005b0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004b68:	e01c      	b.n	8004ba4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004b6a:	6839      	ldr	r1, [r7, #0]
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fbe1 	bl	8005334 <USBD_CtlError>
              break;
 8004b72:	e017      	b.n	8004ba4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	885b      	ldrh	r3, [r3, #2]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d112      	bne.n	8004ba2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004b7c:	7bbb      	ldrb	r3, [r7, #14]
 8004b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004b86:	7bbb      	ldrb	r3, [r7, #14]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 ffdd 	bl	8005b4a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fc97 	bl	80054c4 <USBD_CtlSendStatus>
              }
              break;
 8004b96:	e004      	b.n	8004ba2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004b98:	6839      	ldr	r1, [r7, #0]
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fbca 	bl	8005334 <USBD_CtlError>
              break;
 8004ba0:	e000      	b.n	8004ba4 <USBD_StdEPReq+0x14c>
              break;
 8004ba2:	bf00      	nop
          }
          break;
 8004ba4:	e0aa      	b.n	8004cfc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d002      	beq.n	8004bb6 <USBD_StdEPReq+0x15e>
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d032      	beq.n	8004c1a <USBD_StdEPReq+0x1c2>
 8004bb4:	e097      	b.n	8004ce6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004bb6:	7bbb      	ldrb	r3, [r7, #14]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <USBD_StdEPReq+0x174>
 8004bbc:	7bbb      	ldrb	r3, [r7, #14]
 8004bbe:	2b80      	cmp	r3, #128	; 0x80
 8004bc0:	d004      	beq.n	8004bcc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004bc2:	6839      	ldr	r1, [r7, #0]
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fbb5 	bl	8005334 <USBD_CtlError>
                break;
 8004bca:	e091      	b.n	8004cf0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	da0b      	bge.n	8004bec <USBD_StdEPReq+0x194>
 8004bd4:	7bbb      	ldrb	r3, [r7, #14]
 8004bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bda:	4613      	mov	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	3310      	adds	r3, #16
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	4413      	add	r3, r2
 8004be8:	3304      	adds	r3, #4
 8004bea:	e00b      	b.n	8004c04 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004bec:	7bbb      	ldrb	r3, [r7, #14]
 8004bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	3304      	adds	r3, #4
 8004c04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fbf8 	bl	8005408 <USBD_CtlSendData>
              break;
 8004c18:	e06a      	b.n	8004cf0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004c1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	da11      	bge.n	8004c46 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004c22:	7bbb      	ldrb	r3, [r7, #14]
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	3318      	adds	r3, #24
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d117      	bne.n	8004c6c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fb78 	bl	8005334 <USBD_CtlError>
                  break;
 8004c44:	e054      	b.n	8004cf0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004c46:	7bbb      	ldrb	r3, [r7, #14]
 8004c48:	f003 020f 	and.w	r2, r3, #15
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004c62:	6839      	ldr	r1, [r7, #0]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fb65 	bl	8005334 <USBD_CtlError>
                  break;
 8004c6a:	e041      	b.n	8004cf0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	da0b      	bge.n	8004c8c <USBD_StdEPReq+0x234>
 8004c74:	7bbb      	ldrb	r3, [r7, #14]
 8004c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	3310      	adds	r3, #16
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	4413      	add	r3, r2
 8004c88:	3304      	adds	r3, #4
 8004c8a:	e00b      	b.n	8004ca4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004c8c:	7bbb      	ldrb	r3, [r7, #14]
 8004c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004ca6:	7bbb      	ldrb	r3, [r7, #14]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <USBD_StdEPReq+0x25a>
 8004cac:	7bbb      	ldrb	r3, [r7, #14]
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d103      	bne.n	8004cba <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e00e      	b.n	8004cd8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004cba:	7bbb      	ldrb	r3, [r7, #14]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 ff62 	bl	8005b88 <USBD_LL_IsStallEP>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e002      	b.n	8004cd8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fb92 	bl	8005408 <USBD_CtlSendData>
              break;
 8004ce4:	e004      	b.n	8004cf0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fb23 	bl	8005334 <USBD_CtlError>
              break;
 8004cee:	bf00      	nop
          }
          break;
 8004cf0:	e004      	b.n	8004cfc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fb1d 	bl	8005334 <USBD_CtlError>
          break;
 8004cfa:	bf00      	nop
      }
      break;
 8004cfc:	e004      	b.n	8004d08 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004cfe:	6839      	ldr	r1, [r7, #0]
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fb17 	bl	8005334 <USBD_CtlError>
      break;
 8004d06:	bf00      	nop
  }

  return ret;
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	885b      	ldrh	r3, [r3, #2]
 8004d2e:	0a1b      	lsrs	r3, r3, #8
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	2b06      	cmp	r3, #6
 8004d36:	f200 8128 	bhi.w	8004f8a <USBD_GetDescriptor+0x276>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <USBD_GetDescriptor+0x2c>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d5d 	.word	0x08004d5d
 8004d44:	08004d75 	.word	0x08004d75
 8004d48:	08004db5 	.word	0x08004db5
 8004d4c:	08004f8b 	.word	0x08004f8b
 8004d50:	08004f8b 	.word	0x08004f8b
 8004d54:	08004f2b 	.word	0x08004f2b
 8004d58:	08004f57 	.word	0x08004f57
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	7c12      	ldrb	r2, [r2, #16]
 8004d68:	f107 0108 	add.w	r1, r7, #8
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4798      	blx	r3
 8004d70:	60f8      	str	r0, [r7, #12]
      break;
 8004d72:	e112      	b.n	8004f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	7c1b      	ldrb	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10d      	bne.n	8004d98 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f107 0208 	add.w	r2, r7, #8
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4798      	blx	r3
 8004d8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3301      	adds	r3, #1
 8004d92:	2202      	movs	r2, #2
 8004d94:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004d96:	e100      	b.n	8004f9a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	f107 0208 	add.w	r2, r7, #8
 8004da4:	4610      	mov	r0, r2
 8004da6:	4798      	blx	r3
 8004da8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3301      	adds	r3, #1
 8004dae:	2202      	movs	r2, #2
 8004db0:	701a      	strb	r2, [r3, #0]
      break;
 8004db2:	e0f2      	b.n	8004f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	885b      	ldrh	r3, [r3, #2]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	f200 80ac 	bhi.w	8004f18 <USBD_GetDescriptor+0x204>
 8004dc0:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <USBD_GetDescriptor+0xb4>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004de1 	.word	0x08004de1
 8004dcc:	08004e15 	.word	0x08004e15
 8004dd0:	08004e49 	.word	0x08004e49
 8004dd4:	08004e7d 	.word	0x08004e7d
 8004dd8:	08004eb1 	.word	0x08004eb1
 8004ddc:	08004ee5 	.word	0x08004ee5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00b      	beq.n	8004e04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	7c12      	ldrb	r2, [r2, #16]
 8004df8:	f107 0108 	add.w	r1, r7, #8
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4798      	blx	r3
 8004e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004e02:	e091      	b.n	8004f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fa94 	bl	8005334 <USBD_CtlError>
            err++;
 8004e0c:	7afb      	ldrb	r3, [r7, #11]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	72fb      	strb	r3, [r7, #11]
          break;
 8004e12:	e089      	b.n	8004f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00b      	beq.n	8004e38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	7c12      	ldrb	r2, [r2, #16]
 8004e2c:	f107 0108 	add.w	r1, r7, #8
 8004e30:	4610      	mov	r0, r2
 8004e32:	4798      	blx	r3
 8004e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004e36:	e077      	b.n	8004f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fa7a 	bl	8005334 <USBD_CtlError>
            err++;
 8004e40:	7afb      	ldrb	r3, [r7, #11]
 8004e42:	3301      	adds	r3, #1
 8004e44:	72fb      	strb	r3, [r7, #11]
          break;
 8004e46:	e06f      	b.n	8004f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	7c12      	ldrb	r2, [r2, #16]
 8004e60:	f107 0108 	add.w	r1, r7, #8
 8004e64:	4610      	mov	r0, r2
 8004e66:	4798      	blx	r3
 8004e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004e6a:	e05d      	b.n	8004f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fa60 	bl	8005334 <USBD_CtlError>
            err++;
 8004e74:	7afb      	ldrb	r3, [r7, #11]
 8004e76:	3301      	adds	r3, #1
 8004e78:	72fb      	strb	r3, [r7, #11]
          break;
 8004e7a:	e055      	b.n	8004f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00b      	beq.n	8004ea0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	7c12      	ldrb	r2, [r2, #16]
 8004e94:	f107 0108 	add.w	r1, r7, #8
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4798      	blx	r3
 8004e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004e9e:	e043      	b.n	8004f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa46 	bl	8005334 <USBD_CtlError>
            err++;
 8004ea8:	7afb      	ldrb	r3, [r7, #11]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	72fb      	strb	r3, [r7, #11]
          break;
 8004eae:	e03b      	b.n	8004f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00b      	beq.n	8004ed4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	7c12      	ldrb	r2, [r2, #16]
 8004ec8:	f107 0108 	add.w	r1, r7, #8
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4798      	blx	r3
 8004ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004ed2:	e029      	b.n	8004f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004ed4:	6839      	ldr	r1, [r7, #0]
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fa2c 	bl	8005334 <USBD_CtlError>
            err++;
 8004edc:	7afb      	ldrb	r3, [r7, #11]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8004ee2:	e021      	b.n	8004f28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00b      	beq.n	8004f08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	7c12      	ldrb	r2, [r2, #16]
 8004efc:	f107 0108 	add.w	r1, r7, #8
 8004f00:	4610      	mov	r0, r2
 8004f02:	4798      	blx	r3
 8004f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f06:	e00f      	b.n	8004f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa12 	bl	8005334 <USBD_CtlError>
            err++;
 8004f10:	7afb      	ldrb	r3, [r7, #11]
 8004f12:	3301      	adds	r3, #1
 8004f14:	72fb      	strb	r3, [r7, #11]
          break;
 8004f16:	e007      	b.n	8004f28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fa0a 	bl	8005334 <USBD_CtlError>
          err++;
 8004f20:	7afb      	ldrb	r3, [r7, #11]
 8004f22:	3301      	adds	r3, #1
 8004f24:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004f26:	e038      	b.n	8004f9a <USBD_GetDescriptor+0x286>
 8004f28:	e037      	b.n	8004f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	7c1b      	ldrb	r3, [r3, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3a:	f107 0208 	add.w	r2, r7, #8
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4798      	blx	r3
 8004f42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004f44:	e029      	b.n	8004f9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f9f3 	bl	8005334 <USBD_CtlError>
        err++;
 8004f4e:	7afb      	ldrb	r3, [r7, #11]
 8004f50:	3301      	adds	r3, #1
 8004f52:	72fb      	strb	r3, [r7, #11]
      break;
 8004f54:	e021      	b.n	8004f9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	7c1b      	ldrb	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10d      	bne.n	8004f7a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	f107 0208 	add.w	r2, r7, #8
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	4798      	blx	r3
 8004f6e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	2207      	movs	r2, #7
 8004f76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004f78:	e00f      	b.n	8004f9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f9d9 	bl	8005334 <USBD_CtlError>
        err++;
 8004f82:	7afb      	ldrb	r3, [r7, #11]
 8004f84:	3301      	adds	r3, #1
 8004f86:	72fb      	strb	r3, [r7, #11]
      break;
 8004f88:	e007      	b.n	8004f9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f9d1 	bl	8005334 <USBD_CtlError>
      err++;
 8004f92:	7afb      	ldrb	r3, [r7, #11]
 8004f94:	3301      	adds	r3, #1
 8004f96:	72fb      	strb	r3, [r7, #11]
      break;
 8004f98:	bf00      	nop
  }

  if (err != 0U)
 8004f9a:	7afb      	ldrb	r3, [r7, #11]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d11c      	bne.n	8004fda <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004fa0:	893b      	ldrh	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d011      	beq.n	8004fca <USBD_GetDescriptor+0x2b6>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	88db      	ldrh	r3, [r3, #6]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00d      	beq.n	8004fca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	88da      	ldrh	r2, [r3, #6]
 8004fb2:	893b      	ldrh	r3, [r7, #8]
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	bf28      	it	cs
 8004fb8:	4613      	movcs	r3, r2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004fbe:	893b      	ldrh	r3, [r7, #8]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68f9      	ldr	r1, [r7, #12]
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fa1f 	bl	8005408 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	88db      	ldrh	r3, [r3, #6]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d104      	bne.n	8004fdc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa76 	bl	80054c4 <USBD_CtlSendStatus>
 8004fd8:	e000      	b.n	8004fdc <USBD_GetDescriptor+0x2c8>
    return;
 8004fda:	bf00      	nop
    }
  }
}
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop

08004fe4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	889b      	ldrh	r3, [r3, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d130      	bne.n	8005058 <USBD_SetAddress+0x74>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	88db      	ldrh	r3, [r3, #6]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d12c      	bne.n	8005058 <USBD_SetAddress+0x74>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	885b      	ldrh	r3, [r3, #2]
 8005002:	2b7f      	cmp	r3, #127	; 0x7f
 8005004:	d828      	bhi.n	8005058 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	885b      	ldrh	r3, [r3, #2]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005010:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005018:	2b03      	cmp	r3, #3
 800501a:	d104      	bne.n	8005026 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800501c:	6839      	ldr	r1, [r7, #0]
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f988 	bl	8005334 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005024:	e01c      	b.n	8005060 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	7bfa      	ldrb	r2, [r7, #15]
 800502a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fdcd 	bl	8005bd2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fa43 	bl	80054c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d004      	beq.n	800504e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800504c:	e008      	b.n	8005060 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005056:	e003      	b.n	8005060 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f96a 	bl	8005334 <USBD_CtlError>
  }
}
 8005060:	bf00      	nop
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	885b      	ldrh	r3, [r3, #2]
 8005076:	b2da      	uxtb	r2, r3
 8005078:	4b41      	ldr	r3, [pc, #260]	; (8005180 <USBD_SetConfig+0x118>)
 800507a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800507c:	4b40      	ldr	r3, [pc, #256]	; (8005180 <USBD_SetConfig+0x118>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d904      	bls.n	800508e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f954 	bl	8005334 <USBD_CtlError>
 800508c:	e075      	b.n	800517a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005094:	2b02      	cmp	r3, #2
 8005096:	d002      	beq.n	800509e <USBD_SetConfig+0x36>
 8005098:	2b03      	cmp	r3, #3
 800509a:	d023      	beq.n	80050e4 <USBD_SetConfig+0x7c>
 800509c:	e062      	b.n	8005164 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800509e:	4b38      	ldr	r3, [pc, #224]	; (8005180 <USBD_SetConfig+0x118>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01a      	beq.n	80050dc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80050a6:	4b36      	ldr	r3, [pc, #216]	; (8005180 <USBD_SetConfig+0x118>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2203      	movs	r2, #3
 80050b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80050b8:	4b31      	ldr	r3, [pc, #196]	; (8005180 <USBD_SetConfig+0x118>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff f9f4 	bl	80044ac <USBD_SetClassConfig>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d104      	bne.n	80050d4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80050ca:	6839      	ldr	r1, [r7, #0]
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f931 	bl	8005334 <USBD_CtlError>
            return;
 80050d2:	e052      	b.n	800517a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f9f5 	bl	80054c4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80050da:	e04e      	b.n	800517a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f9f1 	bl	80054c4 <USBD_CtlSendStatus>
        break;
 80050e2:	e04a      	b.n	800517a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80050e4:	4b26      	ldr	r3, [pc, #152]	; (8005180 <USBD_SetConfig+0x118>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d112      	bne.n	8005112 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80050f4:	4b22      	ldr	r3, [pc, #136]	; (8005180 <USBD_SetConfig+0x118>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80050fe:	4b20      	ldr	r3, [pc, #128]	; (8005180 <USBD_SetConfig+0x118>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff f9f0 	bl	80044ea <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f9da 	bl	80054c4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005110:	e033      	b.n	800517a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005112:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <USBD_SetConfig+0x118>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	d01d      	beq.n	800515c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff f9de 	bl	80044ea <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800512e:	4b14      	ldr	r3, [pc, #80]	; (8005180 <USBD_SetConfig+0x118>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <USBD_SetConfig+0x118>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff f9b4 	bl	80044ac <USBD_SetClassConfig>
 8005144:	4603      	mov	r3, r0
 8005146:	2b02      	cmp	r3, #2
 8005148:	d104      	bne.n	8005154 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800514a:	6839      	ldr	r1, [r7, #0]
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f8f1 	bl	8005334 <USBD_CtlError>
            return;
 8005152:	e012      	b.n	800517a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f9b5 	bl	80054c4 <USBD_CtlSendStatus>
        break;
 800515a:	e00e      	b.n	800517a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f9b1 	bl	80054c4 <USBD_CtlSendStatus>
        break;
 8005162:	e00a      	b.n	800517a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f8e4 	bl	8005334 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800516c:	4b04      	ldr	r3, [pc, #16]	; (8005180 <USBD_SetConfig+0x118>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff f9b9 	bl	80044ea <USBD_ClrClassConfig>
        break;
 8005178:	bf00      	nop
    }
  }
}
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20000180 	.word	0x20000180

08005184 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	88db      	ldrh	r3, [r3, #6]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d004      	beq.n	80051a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f8cb 	bl	8005334 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800519e:	e021      	b.n	80051e4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	db17      	blt.n	80051da <USBD_GetConfig+0x56>
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	dd02      	ble.n	80051b4 <USBD_GetConfig+0x30>
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d00b      	beq.n	80051ca <USBD_GetConfig+0x46>
 80051b2:	e012      	b.n	80051da <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3308      	adds	r3, #8
 80051be:	2201      	movs	r2, #1
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f920 	bl	8005408 <USBD_CtlSendData>
        break;
 80051c8:	e00c      	b.n	80051e4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3304      	adds	r3, #4
 80051ce:	2201      	movs	r2, #1
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f918 	bl	8005408 <USBD_CtlSendData>
        break;
 80051d8:	e004      	b.n	80051e4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f8a9 	bl	8005334 <USBD_CtlError>
        break;
 80051e2:	bf00      	nop
}
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051fc:	3b01      	subs	r3, #1
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d81e      	bhi.n	8005240 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	88db      	ldrh	r3, [r3, #6]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d004      	beq.n	8005214 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f891 	bl	8005334 <USBD_CtlError>
        break;
 8005212:	e01a      	b.n	800524a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f043 0202 	orr.w	r2, r3, #2
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	330c      	adds	r3, #12
 8005234:	2202      	movs	r2, #2
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f8e5 	bl	8005408 <USBD_CtlSendData>
      break;
 800523e:	e004      	b.n	800524a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f876 	bl	8005334 <USBD_CtlError>
      break;
 8005248:	bf00      	nop
  }
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b082      	sub	sp, #8
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	885b      	ldrh	r3, [r3, #2]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d106      	bne.n	8005272 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f929 	bl	80054c4 <USBD_CtlSendStatus>
  }
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800528a:	3b01      	subs	r3, #1
 800528c:	2b02      	cmp	r3, #2
 800528e:	d80b      	bhi.n	80052a8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	885b      	ldrh	r3, [r3, #2]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d10c      	bne.n	80052b2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f90f 	bl	80054c4 <USBD_CtlSendStatus>
      }
      break;
 80052a6:	e004      	b.n	80052b2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80052a8:	6839      	ldr	r1, [r7, #0]
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f842 	bl	8005334 <USBD_CtlError>
      break;
 80052b0:	e000      	b.n	80052b4 <USBD_ClrFeature+0x3a>
      break;
 80052b2:	bf00      	nop
  }
}
 80052b4:	bf00      	nop
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781a      	ldrb	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	785a      	ldrb	r2, [r3, #1]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	3302      	adds	r3, #2
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	b29a      	uxth	r2, r3
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	3303      	adds	r3, #3
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	4413      	add	r3, r2
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	3304      	adds	r3, #4
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	3305      	adds	r3, #5
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	b29b      	uxth	r3, r3
 8005306:	4413      	add	r3, r2
 8005308:	b29a      	uxth	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	3306      	adds	r3, #6
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	b29a      	uxth	r2, r3
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	3307      	adds	r3, #7
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	b29b      	uxth	r3, r3
 8005322:	4413      	add	r3, r2
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	80da      	strh	r2, [r3, #6]

}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr

08005334 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800533e:	2180      	movs	r1, #128	; 0x80
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fbe3 	bl	8005b0c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005346:	2100      	movs	r1, #0
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fbdf 	bl	8005b0c <USBD_LL_StallEP>
}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b086      	sub	sp, #24
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d032      	beq.n	80053d2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f834 	bl	80053da <USBD_GetLen>
 8005372:	4603      	mov	r3, r0
 8005374:	3301      	adds	r3, #1
 8005376:	b29b      	uxth	r3, r3
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	75fa      	strb	r2, [r7, #23]
 8005386:	461a      	mov	r2, r3
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4413      	add	r3, r2
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	7812      	ldrb	r2, [r2, #0]
 8005390:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	75fa      	strb	r2, [r7, #23]
 8005398:	461a      	mov	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4413      	add	r3, r2
 800539e:	2203      	movs	r2, #3
 80053a0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80053a2:	e012      	b.n	80053ca <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	60fa      	str	r2, [r7, #12]
 80053aa:	7dfa      	ldrb	r2, [r7, #23]
 80053ac:	1c51      	adds	r1, r2, #1
 80053ae:	75f9      	strb	r1, [r7, #23]
 80053b0:	4611      	mov	r1, r2
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	440a      	add	r2, r1
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	75fa      	strb	r2, [r7, #23]
 80053c0:	461a      	mov	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4413      	add	r3, r2
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e8      	bne.n	80053a4 <USBD_GetString+0x4e>
    }
  }
}
 80053d2:	bf00      	nop
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80053e6:	e005      	b.n	80053f4 <USBD_GetLen+0x1a>
  {
    len++;
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	3301      	adds	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
    buf++;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3301      	adds	r3, #1
 80053f2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f5      	bne.n	80053e8 <USBD_GetLen+0xe>
  }

  return len;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2202      	movs	r2, #2
 800541a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800541e:	88fa      	ldrh	r2, [r7, #6]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005424:	88fa      	ldrh	r2, [r7, #6]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800542a:	88fb      	ldrh	r3, [r7, #6]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	2100      	movs	r1, #0
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 fbed 	bl	8005c10 <USBD_LL_Transmit>

  return USBD_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	4613      	mov	r3, r2
 800544c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	2100      	movs	r1, #0
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 fbdb 	bl	8005c10 <USBD_LL_Transmit>

  return USBD_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2203      	movs	r2, #3
 8005476:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800547a:	88fa      	ldrh	r2, [r7, #6]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005482:	88fa      	ldrh	r2, [r7, #6]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	2100      	movs	r1, #0
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fbe0 	bl	8005c56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	2100      	movs	r1, #0
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fbce 	bl	8005c56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2204      	movs	r2, #4
 80054d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80054d4:	2300      	movs	r3, #0
 80054d6:	2200      	movs	r2, #0
 80054d8:	2100      	movs	r1, #0
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fb98 	bl	8005c10 <USBD_LL_Transmit>

  return USBD_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2205      	movs	r2, #5
 80054f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054fa:	2300      	movs	r3, #0
 80054fc:	2200      	movs	r2, #0
 80054fe:	2100      	movs	r1, #0
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fba8 	bl	8005c56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005514:	2200      	movs	r2, #0
 8005516:	4912      	ldr	r1, [pc, #72]	; (8005560 <MX_USB_DEVICE_Init+0x50>)
 8005518:	4812      	ldr	r0, [pc, #72]	; (8005564 <MX_USB_DEVICE_Init+0x54>)
 800551a:	f7fe ff6d 	bl	80043f8 <USBD_Init>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005524:	f7fa ff60 	bl	80003e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8005528:	490f      	ldr	r1, [pc, #60]	; (8005568 <MX_USB_DEVICE_Init+0x58>)
 800552a:	480e      	ldr	r0, [pc, #56]	; (8005564 <MX_USB_DEVICE_Init+0x54>)
 800552c:	f7fe ff8f 	bl	800444e <USBD_RegisterClass>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005536:	f7fa ff57 	bl	80003e8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800553a:	490c      	ldr	r1, [pc, #48]	; (800556c <MX_USB_DEVICE_Init+0x5c>)
 800553c:	4809      	ldr	r0, [pc, #36]	; (8005564 <MX_USB_DEVICE_Init+0x54>)
 800553e:	f7fe ff45 	bl	80043cc <USBD_CUSTOM_HID_RegisterInterface>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005548:	f7fa ff4e 	bl	80003e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800554c:	4805      	ldr	r0, [pc, #20]	; (8005564 <MX_USB_DEVICE_Init+0x54>)
 800554e:	f7fe ff97 	bl	8004480 <USBD_Start>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005558:	f7fa ff46 	bl	80003e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800555c:	bf00      	nop
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000114 	.word	0x20000114
 8005564:	20000264 	.word	0x20000264
 8005568:	2000000c 	.word	0x2000000c
 800556c:	20000104 	.word	0x20000104

08005570 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005574:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005576:	4618      	mov	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800557e:	b480      	push	{r7}
 8005580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005582:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005584:	4618      	mov	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 800558c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  memcpy(buffer, state, 0x40);
 8005594:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <CUSTOM_HID_OutEvent_FS+0x7c>)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4610      	mov	r0, r2
 800559a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800559e:	4602      	mov	r2, r0
 80055a0:	4619      	mov	r1, r3
 80055a2:	f8d1 c000 	ldr.w	ip, [r1]
 80055a6:	684e      	ldr	r6, [r1, #4]
 80055a8:	688d      	ldr	r5, [r1, #8]
 80055aa:	68c9      	ldr	r1, [r1, #12]
 80055ac:	f8c2 c000 	str.w	ip, [r2]
 80055b0:	6056      	str	r6, [r2, #4]
 80055b2:	6095      	str	r5, [r2, #8]
 80055b4:	60d1      	str	r1, [r2, #12]
 80055b6:	3310      	adds	r3, #16
 80055b8:	3010      	adds	r0, #16
 80055ba:	42a3      	cmp	r3, r4
 80055bc:	d1ef      	bne.n	800559e <CUSTOM_HID_OutEvent_FS+0x12>
  memcpy(receivedBufCopy, buffer, 0x40);
 80055be:	4a13      	ldr	r2, [pc, #76]	; (800560c <CUSTOM_HID_OutEvent_FS+0x80>)
 80055c0:	4b11      	ldr	r3, [pc, #68]	; (8005608 <CUSTOM_HID_OutEvent_FS+0x7c>)
 80055c2:	4610      	mov	r0, r2
 80055c4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80055c8:	4602      	mov	r2, r0
 80055ca:	4619      	mov	r1, r3
 80055cc:	f8d1 c000 	ldr.w	ip, [r1]
 80055d0:	684e      	ldr	r6, [r1, #4]
 80055d2:	688d      	ldr	r5, [r1, #8]
 80055d4:	68c9      	ldr	r1, [r1, #12]
 80055d6:	f8c2 c000 	str.w	ip, [r2]
 80055da:	6056      	str	r6, [r2, #4]
 80055dc:	6095      	str	r5, [r2, #8]
 80055de:	60d1      	str	r1, [r2, #12]
 80055e0:	3310      	adds	r3, #16
 80055e2:	3010      	adds	r0, #16
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	d1ef      	bne.n	80055c8 <CUSTOM_HID_OutEvent_FS+0x3c>

  memcpy(&valueForPWMFromPC, buffer, 4);
 80055e8:	4b07      	ldr	r3, [pc, #28]	; (8005608 <CUSTOM_HID_OutEvent_FS+0x7c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	4b08      	ldr	r3, [pc, #32]	; (8005610 <CUSTOM_HID_OutEvent_FS+0x84>)
 80055f0:	601a      	str	r2, [r3, #0]

  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buffer, 0x40);
 80055f2:	2240      	movs	r2, #64	; 0x40
 80055f4:	4904      	ldr	r1, [pc, #16]	; (8005608 <CUSTOM_HID_OutEvent_FS+0x7c>)
 80055f6:	4807      	ldr	r0, [pc, #28]	; (8005614 <CUSTOM_HID_OutEvent_FS+0x88>)
 80055f8:	f7fe fe36 	bl	8004268 <USBD_CUSTOM_HID_SendReport>
  return (USBD_OK);
 80055fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005606:	bf00      	nop
 8005608:	20000528 	.word	0x20000528
 800560c:	20000220 	.word	0x20000220
 8005610:	200001dc 	.word	0x200001dc
 8005614:	20000264 	.word	0x20000264

08005618 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	6039      	str	r1, [r7, #0]
 8005622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2212      	movs	r2, #18
 8005628:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800562a:	4b03      	ldr	r3, [pc, #12]	; (8005638 <USBD_FS_DeviceDescriptor+0x20>)
}
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000130 	.word	0x20000130

0800563c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	6039      	str	r1, [r7, #0]
 8005646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2204      	movs	r2, #4
 800564c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800564e:	4b03      	ldr	r3, [pc, #12]	; (800565c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000144 	.word	0x20000144

08005660 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	6039      	str	r1, [r7, #0]
 800566a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d105      	bne.n	800567e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	4907      	ldr	r1, [pc, #28]	; (8005694 <USBD_FS_ProductStrDescriptor+0x34>)
 8005676:	4808      	ldr	r0, [pc, #32]	; (8005698 <USBD_FS_ProductStrDescriptor+0x38>)
 8005678:	f7ff fe6d 	bl	8005356 <USBD_GetString>
 800567c:	e004      	b.n	8005688 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	4904      	ldr	r1, [pc, #16]	; (8005694 <USBD_FS_ProductStrDescriptor+0x34>)
 8005682:	4805      	ldr	r0, [pc, #20]	; (8005698 <USBD_FS_ProductStrDescriptor+0x38>)
 8005684:	f7ff fe67 	bl	8005356 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005688:	4b02      	ldr	r3, [pc, #8]	; (8005694 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000568 	.word	0x20000568
 8005698:	08005db8 	.word	0x08005db8

0800569c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	6039      	str	r1, [r7, #0]
 80056a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	4904      	ldr	r1, [pc, #16]	; (80056bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80056ac:	4804      	ldr	r0, [pc, #16]	; (80056c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80056ae:	f7ff fe52 	bl	8005356 <USBD_GetString>
  return USBD_StrDesc;
 80056b2:	4b02      	ldr	r3, [pc, #8]	; (80056bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20000568 	.word	0x20000568
 80056c0:	08005dd8 	.word	0x08005dd8

080056c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	6039      	str	r1, [r7, #0]
 80056ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	221a      	movs	r2, #26
 80056d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80056d6:	f000 f843 	bl	8005760 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80056da:	4b02      	ldr	r3, [pc, #8]	; (80056e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20000148 	.word	0x20000148

080056e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	6039      	str	r1, [r7, #0]
 80056f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d105      	bne.n	8005706 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	4907      	ldr	r1, [pc, #28]	; (800571c <USBD_FS_ConfigStrDescriptor+0x34>)
 80056fe:	4808      	ldr	r0, [pc, #32]	; (8005720 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005700:	f7ff fe29 	bl	8005356 <USBD_GetString>
 8005704:	e004      	b.n	8005710 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	4904      	ldr	r1, [pc, #16]	; (800571c <USBD_FS_ConfigStrDescriptor+0x34>)
 800570a:	4805      	ldr	r0, [pc, #20]	; (8005720 <USBD_FS_ConfigStrDescriptor+0x38>)
 800570c:	f7ff fe23 	bl	8005356 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005710:	4b02      	ldr	r3, [pc, #8]	; (800571c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000568 	.word	0x20000568
 8005720:	08005dec 	.word	0x08005dec

08005724 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	6039      	str	r1, [r7, #0]
 800572e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d105      	bne.n	8005742 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	4907      	ldr	r1, [pc, #28]	; (8005758 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800573a:	4808      	ldr	r0, [pc, #32]	; (800575c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800573c:	f7ff fe0b 	bl	8005356 <USBD_GetString>
 8005740:	e004      	b.n	800574c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	4904      	ldr	r1, [pc, #16]	; (8005758 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005746:	4805      	ldr	r0, [pc, #20]	; (800575c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005748:	f7ff fe05 	bl	8005356 <USBD_GetString>
  }
  return USBD_StrDesc;
 800574c:	4b02      	ldr	r3, [pc, #8]	; (8005758 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000568 	.word	0x20000568
 800575c:	08005e00 	.word	0x08005e00

08005760 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005766:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <Get_SerialNum+0x44>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800576c:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <Get_SerialNum+0x48>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005772:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <Get_SerialNum+0x4c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4413      	add	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005786:	2208      	movs	r2, #8
 8005788:	4909      	ldr	r1, [pc, #36]	; (80057b0 <Get_SerialNum+0x50>)
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 f814 	bl	80057b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005790:	2204      	movs	r2, #4
 8005792:	4908      	ldr	r1, [pc, #32]	; (80057b4 <Get_SerialNum+0x54>)
 8005794:	68b8      	ldr	r0, [r7, #8]
 8005796:	f000 f80f 	bl	80057b8 <IntToUnicode>
  }
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	1ffff7e8 	.word	0x1ffff7e8
 80057a8:	1ffff7ec 	.word	0x1ffff7ec
 80057ac:	1ffff7f0 	.word	0x1ffff7f0
 80057b0:	2000014a 	.word	0x2000014a
 80057b4:	2000015a 	.word	0x2000015a

080057b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4613      	mov	r3, r2
 80057c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80057ca:	2300      	movs	r3, #0
 80057cc:	75fb      	strb	r3, [r7, #23]
 80057ce:	e027      	b.n	8005820 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	0f1b      	lsrs	r3, r3, #28
 80057d4:	2b09      	cmp	r3, #9
 80057d6:	d80b      	bhi.n	80057f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	0f1b      	lsrs	r3, r3, #28
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	7dfb      	ldrb	r3, [r7, #23]
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4619      	mov	r1, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	440b      	add	r3, r1
 80057e8:	3230      	adds	r2, #48	; 0x30
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	e00a      	b.n	8005806 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	0f1b      	lsrs	r3, r3, #28
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	4619      	mov	r1, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	440b      	add	r3, r1
 8005800:	3237      	adds	r2, #55	; 0x37
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800580c:	7dfb      	ldrb	r3, [r7, #23]
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	3301      	adds	r3, #1
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	4413      	add	r3, r2
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800581a:	7dfb      	ldrb	r3, [r7, #23]
 800581c:	3301      	adds	r3, #1
 800581e:	75fb      	strb	r3, [r7, #23]
 8005820:	7dfa      	ldrb	r2, [r7, #23]
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	429a      	cmp	r2, r3
 8005826:	d3d3      	bcc.n	80057d0 <IntToUnicode+0x18>
  }
}
 8005828:	bf00      	nop
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr
	...

08005834 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0d      	ldr	r2, [pc, #52]	; (8005878 <HAL_PCD_MspInit+0x44>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d113      	bne.n	800586e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005846:	4b0d      	ldr	r3, [pc, #52]	; (800587c <HAL_PCD_MspInit+0x48>)
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	4a0c      	ldr	r2, [pc, #48]	; (800587c <HAL_PCD_MspInit+0x48>)
 800584c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005850:	61d3      	str	r3, [r2, #28]
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <HAL_PCD_MspInit+0x48>)
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800585e:	2200      	movs	r2, #0
 8005860:	2100      	movs	r1, #0
 8005862:	2014      	movs	r0, #20
 8005864:	f7fb f80f 	bl	8000886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005868:	2014      	movs	r0, #20
 800586a:	f7fb f828 	bl	80008be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40005c00 	.word	0x40005c00
 800587c:	40021000 	.word	0x40021000

08005880 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005894:	4619      	mov	r1, r3
 8005896:	4610      	mov	r0, r2
 8005898:	f7fe fe3a 	bl	8004510 <USBD_LL_SetupStage>
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80058b6:	78fb      	ldrb	r3, [r7, #3]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	015b      	lsls	r3, r3, #5
 80058bc:	4413      	add	r3, r2
 80058be:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	4619      	mov	r1, r3
 80058c8:	f7fe fe6d 	bl	80045a6 <USBD_LL_DataOutStage>
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	015b      	lsls	r3, r3, #5
 80058ec:	4413      	add	r3, r2
 80058ee:	333c      	adds	r3, #60	; 0x3c
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	4619      	mov	r1, r3
 80058f6:	f7fe fec7 	bl	8004688 <USBD_LL_DataInStage>
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe ffd7 	bl	80048c4 <USBD_LL_SOF>
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005926:	2301      	movs	r3, #1
 8005928:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d001      	beq.n	8005936 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005932:	f7fa fd59 	bl	80003e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800593c:	7bfa      	ldrb	r2, [r7, #15]
 800593e:	4611      	mov	r1, r2
 8005940:	4618      	mov	r0, r3
 8005942:	f7fe ff87 	bl	8004854 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800594c:	4618      	mov	r0, r3
 800594e:	f7fe ff40 	bl	80047d2 <USBD_LL_Reset>
}
 8005952:	bf00      	nop
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe ff81 	bl	8004872 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005978:	4b04      	ldr	r3, [pc, #16]	; (800598c <HAL_PCD_SuspendCallback+0x30>)
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	4a03      	ldr	r2, [pc, #12]	; (800598c <HAL_PCD_SuspendCallback+0x30>)
 800597e:	f043 0306 	orr.w	r3, r3, #6
 8005982:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005984:	bf00      	nop
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	e000ed00 	.word	0xe000ed00

08005990 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe ff7b 	bl	800489a <USBD_LL_Resume>
}
 80059a4:	bf00      	nop
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80059b4:	4a23      	ldr	r2, [pc, #140]	; (8005a44 <USBD_LL_Init+0x98>)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a21      	ldr	r2, [pc, #132]	; (8005a44 <USBD_LL_Init+0x98>)
 80059c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80059c4:	4b1f      	ldr	r3, [pc, #124]	; (8005a44 <USBD_LL_Init+0x98>)
 80059c6:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <USBD_LL_Init+0x9c>)
 80059c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80059ca:	4b1e      	ldr	r3, [pc, #120]	; (8005a44 <USBD_LL_Init+0x98>)
 80059cc:	2208      	movs	r2, #8
 80059ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80059d0:	4b1c      	ldr	r3, [pc, #112]	; (8005a44 <USBD_LL_Init+0x98>)
 80059d2:	2202      	movs	r2, #2
 80059d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80059d6:	4b1b      	ldr	r3, [pc, #108]	; (8005a44 <USBD_LL_Init+0x98>)
 80059d8:	2200      	movs	r2, #0
 80059da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80059dc:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <USBD_LL_Init+0x98>)
 80059de:	2200      	movs	r2, #0
 80059e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80059e2:	4b18      	ldr	r3, [pc, #96]	; (8005a44 <USBD_LL_Init+0x98>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80059e8:	4816      	ldr	r0, [pc, #88]	; (8005a44 <USBD_LL_Init+0x98>)
 80059ea:	f7fb f90d 	bl	8000c08 <HAL_PCD_Init>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80059f4:	f7fa fcf8 	bl	80003e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059fe:	2318      	movs	r3, #24
 8005a00:	2200      	movs	r2, #0
 8005a02:	2100      	movs	r1, #0
 8005a04:	f7fb ff92 	bl	800192c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a0e:	2358      	movs	r3, #88	; 0x58
 8005a10:	2200      	movs	r2, #0
 8005a12:	2180      	movs	r1, #128	; 0x80
 8005a14:	f7fb ff8a 	bl	800192c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a1e:	2398      	movs	r3, #152	; 0x98
 8005a20:	2200      	movs	r2, #0
 8005a22:	2181      	movs	r1, #129	; 0x81
 8005a24:	f7fb ff82 	bl	800192c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a2e:	23d8      	movs	r3, #216	; 0xd8
 8005a30:	2200      	movs	r2, #0
 8005a32:	2101      	movs	r1, #1
 8005a34:	f7fb ff7a 	bl	800192c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000768 	.word	0x20000768
 8005a48:	40005c00 	.word	0x40005c00

08005a4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fb f9b1 	bl	8000dca <HAL_PCD_Start>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 f934 	bl	8005cdc <USBD_Get_USB_Status>
 8005a74:	4603      	mov	r3, r0
 8005a76:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	4608      	mov	r0, r1
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	461a      	mov	r2, r3
 8005a90:	4603      	mov	r3, r0
 8005a92:	70fb      	strb	r3, [r7, #3]
 8005a94:	460b      	mov	r3, r1
 8005a96:	70bb      	strb	r3, [r7, #2]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005aaa:	78bb      	ldrb	r3, [r7, #2]
 8005aac:	883a      	ldrh	r2, [r7, #0]
 8005aae:	78f9      	ldrb	r1, [r7, #3]
 8005ab0:	f7fb fae4 	bl	800107c <HAL_PCD_EP_Open>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f90e 	bl	8005cdc <USBD_Get_USB_Status>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ae8:	78fa      	ldrb	r2, [r7, #3]
 8005aea:	4611      	mov	r1, r2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fb fb25 	bl	800113c <HAL_PCD_EP_Close>
 8005af2:	4603      	mov	r3, r0
 8005af4:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 f8ef 	bl	8005cdc <USBD_Get_USB_Status>
 8005afe:	4603      	mov	r3, r0
 8005b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fb fbbb 	bl	80012a6 <HAL_PCD_EP_SetStall>
 8005b30:	4603      	mov	r3, r0
 8005b32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f8d0 	bl	8005cdc <USBD_Get_USB_Status>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005b40:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	4611      	mov	r1, r2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fb fbf6 	bl	800135a <HAL_PCD_EP_ClrStall>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 f8b1 	bl	8005cdc <USBD_Get_USB_Status>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b9a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	da08      	bge.n	8005bb6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	015b      	lsls	r3, r3, #5
 8005bae:	4413      	add	r3, r2
 8005bb0:	332a      	adds	r3, #42	; 0x2a
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	e008      	b.n	8005bc8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	015b      	lsls	r3, r3, #5
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005bc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bc80      	pop	{r7}
 8005bd0:	4770      	bx	lr

08005bd2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bec:	78fa      	ldrb	r2, [r7, #3]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fb fa1e 	bl	8001032 <HAL_PCD_SetAddress>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 f86d 	bl	8005cdc <USBD_Get_USB_Status>
 8005c02:	4603      	mov	r3, r0
 8005c04:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	72fb      	strb	r3, [r7, #11]
 8005c20:	4613      	mov	r3, r2
 8005c22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c32:	893b      	ldrh	r3, [r7, #8]
 8005c34:	7af9      	ldrb	r1, [r7, #11]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	f7fb fafc 	bl	8001234 <HAL_PCD_EP_Transmit>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 f84a 	bl	8005cdc <USBD_Get_USB_Status>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005c4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b086      	sub	sp, #24
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	461a      	mov	r2, r3
 8005c62:	460b      	mov	r3, r1
 8005c64:	72fb      	strb	r3, [r7, #11]
 8005c66:	4613      	mov	r3, r2
 8005c68:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c78:	893b      	ldrh	r3, [r7, #8]
 8005c7a:	7af9      	ldrb	r1, [r7, #11]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	f7fb fa9f 	bl	80011c0 <HAL_PCD_EP_Receive>
 8005c82:	4603      	mov	r3, r0
 8005c84:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 f827 	bl	8005cdc <USBD_Get_USB_Status>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005c92:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8005ca4:	4b02      	ldr	r3, [pc, #8]	; (8005cb0 <USBD_static_malloc+0x14>)
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr
 8005cb0:	20000184 	.word	0x20000184

08005cb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]

}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d817      	bhi.n	8005d20 <USBD_Get_USB_Status+0x44>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <USBD_Get_USB_Status+0x1c>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d09 	.word	0x08005d09
 8005cfc:	08005d0f 	.word	0x08005d0f
 8005d00:	08005d15 	.word	0x08005d15
 8005d04:	08005d1b 	.word	0x08005d1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8005d0c:	e00b      	b.n	8005d26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005d0e:	2302      	movs	r3, #2
 8005d10:	73fb      	strb	r3, [r7, #15]
    break;
 8005d12:	e008      	b.n	8005d26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
    break;
 8005d18:	e005      	b.n	8005d26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8005d1e:	e002      	b.n	8005d26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005d20:	2302      	movs	r3, #2
 8005d22:	73fb      	strb	r3, [r7, #15]
    break;
 8005d24:	bf00      	nop
  }
  return usb_status;
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bc80      	pop	{r7}
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop

08005d34 <__libc_init_array>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	2500      	movs	r5, #0
 8005d38:	4e0c      	ldr	r6, [pc, #48]	; (8005d6c <__libc_init_array+0x38>)
 8005d3a:	4c0d      	ldr	r4, [pc, #52]	; (8005d70 <__libc_init_array+0x3c>)
 8005d3c:	1ba4      	subs	r4, r4, r6
 8005d3e:	10a4      	asrs	r4, r4, #2
 8005d40:	42a5      	cmp	r5, r4
 8005d42:	d109      	bne.n	8005d58 <__libc_init_array+0x24>
 8005d44:	f000 f822 	bl	8005d8c <_init>
 8005d48:	2500      	movs	r5, #0
 8005d4a:	4e0a      	ldr	r6, [pc, #40]	; (8005d74 <__libc_init_array+0x40>)
 8005d4c:	4c0a      	ldr	r4, [pc, #40]	; (8005d78 <__libc_init_array+0x44>)
 8005d4e:	1ba4      	subs	r4, r4, r6
 8005d50:	10a4      	asrs	r4, r4, #2
 8005d52:	42a5      	cmp	r5, r4
 8005d54:	d105      	bne.n	8005d62 <__libc_init_array+0x2e>
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
 8005d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d5c:	4798      	blx	r3
 8005d5e:	3501      	adds	r5, #1
 8005d60:	e7ee      	b.n	8005d40 <__libc_init_array+0xc>
 8005d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d66:	4798      	blx	r3
 8005d68:	3501      	adds	r5, #1
 8005d6a:	e7f2      	b.n	8005d52 <__libc_init_array+0x1e>
 8005d6c:	08005e28 	.word	0x08005e28
 8005d70:	08005e28 	.word	0x08005e28
 8005d74:	08005e28 	.word	0x08005e28
 8005d78:	08005e2c 	.word	0x08005e2c

08005d7c <memset>:
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	4402      	add	r2, r0
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d100      	bne.n	8005d86 <memset+0xa>
 8005d84:	4770      	bx	lr
 8005d86:	f803 1b01 	strb.w	r1, [r3], #1
 8005d8a:	e7f9      	b.n	8005d80 <memset+0x4>

08005d8c <_init>:
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8e:	bf00      	nop
 8005d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d92:	bc08      	pop	{r3}
 8005d94:	469e      	mov	lr, r3
 8005d96:	4770      	bx	lr

08005d98 <_fini>:
 8005d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9a:	bf00      	nop
 8005d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9e:	bc08      	pop	{r3}
 8005da0:	469e      	mov	lr, r3
 8005da2:	4770      	bx	lr
